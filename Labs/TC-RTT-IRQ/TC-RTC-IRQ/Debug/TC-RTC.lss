
TC-RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bf8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402bf8  00402bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000444  20400000  00402c00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c4  20400444  00403044  00020444  2**2
                  ALLOC
  4 .stack        00002000  20400508  00403108  00020444  2**0
                  ALLOC
  5 .heap         00000200  20402508  00405108  00020444  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020472  2**0
                  CONTENTS, READONLY
  8 .debug_info   00010172  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001f76  00000000  00000000  0003063d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004df7  00000000  00000000  000325b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008a8  00000000  00000000  000373aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d8  00000000  00000000  00037c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001daf1  00000000  00000000  0003842a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009ba6  00000000  00000000  00055f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00089c06  00000000  00000000  0005fac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002614  00000000  00000000  000e96c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 25 40 20 bd 1a 40 00 6d 1b 40 00 6d 1b 40 00     .%@ ..@.m.@.m.@.
  400010:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 00 00 00 00     m.@.m.@.m.@.....
	...
  40002c:	6d 1b 40 00 6d 1b 40 00 00 00 00 00 6d 1b 40 00     m.@.m.@.....m.@.
  40003c:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 f9 20 40 00     m.@.m.@.m.@.. @.
  40004c:	b5 20 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     . @.m.@.m.@.m.@.
  40005c:	6d 1b 40 00 6d 1b 40 00 00 00 00 00 9d 0a 40 00     m.@.m.@.......@.
  40006c:	b5 0a 40 00 cd 0a 40 00 6d 1b 40 00 6d 1b 40 00     ..@...@.m.@.m.@.
  40007c:	6d 1b 40 00 e5 0a 40 00 fd 0a 40 00 6d 1b 40 00     m.@...@...@.m.@.
  40008c:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     m.@.m.@.m.@.m.@.
  40009c:	6d 1b 40 00 25 1f 40 00 6d 1b 40 00 6d 1b 40 00     m.@.%.@.m.@.m.@.
  4000ac:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     m.@.m.@.m.@.m.@.
  4000bc:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     m.@.m.@.m.@.m.@.
  4000cc:	6d 1b 40 00 00 00 00 00 6d 1b 40 00 00 00 00 00     m.@.....m.@.....
  4000dc:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     m.@.m.@.m.@.m.@.
  4000ec:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     m.@.m.@.m.@.m.@.
  4000fc:	6d 1b 40 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     m.@.m.@.m.@.m.@.
  40010c:	6d 1b 40 00 6d 1b 40 00 00 00 00 00 00 00 00 00     m.@.m.@.........
  40011c:	00 00 00 00 6d 1b 40 00 6d 1b 40 00 6d 1b 40 00     ....m.@.m.@.m.@.
  40012c:	6d 1b 40 00 6d 1b 40 00 00 00 00 00 6d 1b 40 00     m.@.m.@.....m.@.
  40013c:	6d 1b 40 00                                         m.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400444 	.word	0x20400444
  40015c:	00000000 	.word	0x00000000
  400160:	00402c00 	.word	0x00402c00

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402c00 	.word	0x00402c00
  4001a0:	20400448 	.word	0x20400448
  4001a4:	00402c00 	.word	0x00402c00
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400c15 	.word	0x00400c15
  40022c:	00400c81 	.word	0x00400c81
  400230:	00400cf1 	.word	0x00400cf1

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400c4d 	.word	0x00400c4d
  4002a0:	00400d69 	.word	0x00400d69

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400d85 	.word	0x00400d85
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400da1 	.word	0x00400da1
  400418:	00400dbd 	.word	0x00400dbd

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00401cdd 	.word	0x00401cdd
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400b15 	.word	0x00400b15
  40051c:	00400b91 	.word	0x00400b91
  400520:	00401b75 	.word	0x00401b75
  400524:	00400499 	.word	0x00400499

00400528 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400528:	b480      	push	{r7}
  40052a:	b085      	sub	sp, #20
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400534:	687b      	ldr	r3, [r7, #4]
  400536:	2b00      	cmp	r3, #0
  400538:	d003      	beq.n	400542 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40053a:	68fb      	ldr	r3, [r7, #12]
  40053c:	68ba      	ldr	r2, [r7, #8]
  40053e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400540:	e002      	b.n	400548 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400542:	68fb      	ldr	r3, [r7, #12]
  400544:	68ba      	ldr	r2, [r7, #8]
  400546:	661a      	str	r2, [r3, #96]	; 0x60
}
  400548:	bf00      	nop
  40054a:	3714      	adds	r7, #20
  40054c:	46bd      	mov	sp, r7
  40054e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400552:	4770      	bx	lr

00400554 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400554:	b480      	push	{r7}
  400556:	b083      	sub	sp, #12
  400558:	af00      	add	r7, sp, #0
  40055a:	6078      	str	r0, [r7, #4]
  40055c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	683a      	ldr	r2, [r7, #0]
  400562:	631a      	str	r2, [r3, #48]	; 0x30
}
  400564:	bf00      	nop
  400566:	370c      	adds	r7, #12
  400568:	46bd      	mov	sp, r7
  40056a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40056e:	4770      	bx	lr

00400570 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400570:	b480      	push	{r7}
  400572:	b083      	sub	sp, #12
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
  400578:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40057a:	687b      	ldr	r3, [r7, #4]
  40057c:	683a      	ldr	r2, [r7, #0]
  40057e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400580:	bf00      	nop
  400582:	370c      	adds	r7, #12
  400584:	46bd      	mov	sp, r7
  400586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058a:	4770      	bx	lr

0040058c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40058c:	b480      	push	{r7}
  40058e:	b087      	sub	sp, #28
  400590:	af00      	add	r7, sp, #0
  400592:	60f8      	str	r0, [r7, #12]
  400594:	60b9      	str	r1, [r7, #8]
  400596:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	687a      	ldr	r2, [r7, #4]
  40059c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40059e:	68bb      	ldr	r3, [r7, #8]
  4005a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005a4:	d04a      	beq.n	40063c <pio_set_peripheral+0xb0>
  4005a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005aa:	d808      	bhi.n	4005be <pio_set_peripheral+0x32>
  4005ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005b0:	d016      	beq.n	4005e0 <pio_set_peripheral+0x54>
  4005b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005b6:	d02c      	beq.n	400612 <pio_set_peripheral+0x86>
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d069      	beq.n	400690 <pio_set_peripheral+0x104>
  4005bc:	e064      	b.n	400688 <pio_set_peripheral+0xfc>
  4005be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005c2:	d065      	beq.n	400690 <pio_set_peripheral+0x104>
  4005c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005c8:	d803      	bhi.n	4005d2 <pio_set_peripheral+0x46>
  4005ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005ce:	d04a      	beq.n	400666 <pio_set_peripheral+0xda>
  4005d0:	e05a      	b.n	400688 <pio_set_peripheral+0xfc>
  4005d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005d6:	d05b      	beq.n	400690 <pio_set_peripheral+0x104>
  4005d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005dc:	d058      	beq.n	400690 <pio_set_peripheral+0x104>
  4005de:	e053      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005e4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005ea:	687b      	ldr	r3, [r7, #4]
  4005ec:	43d9      	mvns	r1, r3
  4005ee:	697b      	ldr	r3, [r7, #20]
  4005f0:	400b      	ands	r3, r1
  4005f2:	401a      	ands	r2, r3
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005f8:	68fb      	ldr	r3, [r7, #12]
  4005fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400602:	687b      	ldr	r3, [r7, #4]
  400604:	43d9      	mvns	r1, r3
  400606:	697b      	ldr	r3, [r7, #20]
  400608:	400b      	ands	r3, r1
  40060a:	401a      	ands	r2, r3
  40060c:	68fb      	ldr	r3, [r7, #12]
  40060e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400610:	e03a      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400616:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400618:	687a      	ldr	r2, [r7, #4]
  40061a:	697b      	ldr	r3, [r7, #20]
  40061c:	431a      	orrs	r2, r3
  40061e:	68fb      	ldr	r3, [r7, #12]
  400620:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400622:	68fb      	ldr	r3, [r7, #12]
  400624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400626:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400628:	68fb      	ldr	r3, [r7, #12]
  40062a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40062c:	687b      	ldr	r3, [r7, #4]
  40062e:	43d9      	mvns	r1, r3
  400630:	697b      	ldr	r3, [r7, #20]
  400632:	400b      	ands	r3, r1
  400634:	401a      	ands	r2, r3
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40063a:	e025      	b.n	400688 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40063c:	68fb      	ldr	r3, [r7, #12]
  40063e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400640:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400642:	68fb      	ldr	r3, [r7, #12]
  400644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400646:	687b      	ldr	r3, [r7, #4]
  400648:	43d9      	mvns	r1, r3
  40064a:	697b      	ldr	r3, [r7, #20]
  40064c:	400b      	ands	r3, r1
  40064e:	401a      	ands	r2, r3
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400654:	68fb      	ldr	r3, [r7, #12]
  400656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400658:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40065a:	687a      	ldr	r2, [r7, #4]
  40065c:	697b      	ldr	r3, [r7, #20]
  40065e:	431a      	orrs	r2, r3
  400660:	68fb      	ldr	r3, [r7, #12]
  400662:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400664:	e010      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400666:	68fb      	ldr	r3, [r7, #12]
  400668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40066a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40066c:	687a      	ldr	r2, [r7, #4]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	431a      	orrs	r2, r3
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400676:	68fb      	ldr	r3, [r7, #12]
  400678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40067a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40067c:	687a      	ldr	r2, [r7, #4]
  40067e:	697b      	ldr	r3, [r7, #20]
  400680:	431a      	orrs	r2, r3
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400686:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400688:	68fb      	ldr	r3, [r7, #12]
  40068a:	687a      	ldr	r2, [r7, #4]
  40068c:	605a      	str	r2, [r3, #4]
  40068e:	e000      	b.n	400692 <pio_set_peripheral+0x106>
		return;
  400690:	bf00      	nop
}
  400692:	371c      	adds	r7, #28
  400694:	46bd      	mov	sp, r7
  400696:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069a:	4770      	bx	lr

0040069c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40069c:	b580      	push	{r7, lr}
  40069e:	b084      	sub	sp, #16
  4006a0:	af00      	add	r7, sp, #0
  4006a2:	60f8      	str	r0, [r7, #12]
  4006a4:	60b9      	str	r1, [r7, #8]
  4006a6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4006a8:	68b9      	ldr	r1, [r7, #8]
  4006aa:	68f8      	ldr	r0, [r7, #12]
  4006ac:	4b19      	ldr	r3, [pc, #100]	; (400714 <pio_set_input+0x78>)
  4006ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0301 	and.w	r3, r3, #1
  4006b6:	461a      	mov	r2, r3
  4006b8:	68b9      	ldr	r1, [r7, #8]
  4006ba:	68f8      	ldr	r0, [r7, #12]
  4006bc:	4b16      	ldr	r3, [pc, #88]	; (400718 <pio_set_input+0x7c>)
  4006be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4006c0:	687b      	ldr	r3, [r7, #4]
  4006c2:	f003 030a 	and.w	r3, r3, #10
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d003      	beq.n	4006d2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4006ca:	68fb      	ldr	r3, [r7, #12]
  4006cc:	68ba      	ldr	r2, [r7, #8]
  4006ce:	621a      	str	r2, [r3, #32]
  4006d0:	e002      	b.n	4006d8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4006d2:	68fb      	ldr	r3, [r7, #12]
  4006d4:	68ba      	ldr	r2, [r7, #8]
  4006d6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4006d8:	687b      	ldr	r3, [r7, #4]
  4006da:	f003 0302 	and.w	r3, r3, #2
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d004      	beq.n	4006ec <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	68ba      	ldr	r2, [r7, #8]
  4006e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4006ea:	e008      	b.n	4006fe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4006ec:	687b      	ldr	r3, [r7, #4]
  4006ee:	f003 0308 	and.w	r3, r3, #8
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	d003      	beq.n	4006fe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4006f6:	68fb      	ldr	r3, [r7, #12]
  4006f8:	68ba      	ldr	r2, [r7, #8]
  4006fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4006fe:	68fb      	ldr	r3, [r7, #12]
  400700:	68ba      	ldr	r2, [r7, #8]
  400702:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	68ba      	ldr	r2, [r7, #8]
  400708:	601a      	str	r2, [r3, #0]
}
  40070a:	bf00      	nop
  40070c:	3710      	adds	r7, #16
  40070e:	46bd      	mov	sp, r7
  400710:	bd80      	pop	{r7, pc}
  400712:	bf00      	nop
  400714:	004008fd 	.word	0x004008fd
  400718:	00400529 	.word	0x00400529

0040071c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40071c:	b580      	push	{r7, lr}
  40071e:	b084      	sub	sp, #16
  400720:	af00      	add	r7, sp, #0
  400722:	60f8      	str	r0, [r7, #12]
  400724:	60b9      	str	r1, [r7, #8]
  400726:	607a      	str	r2, [r7, #4]
  400728:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40072a:	68b9      	ldr	r1, [r7, #8]
  40072c:	68f8      	ldr	r0, [r7, #12]
  40072e:	4b12      	ldr	r3, [pc, #72]	; (400778 <pio_set_output+0x5c>)
  400730:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400732:	69ba      	ldr	r2, [r7, #24]
  400734:	68b9      	ldr	r1, [r7, #8]
  400736:	68f8      	ldr	r0, [r7, #12]
  400738:	4b10      	ldr	r3, [pc, #64]	; (40077c <pio_set_output+0x60>)
  40073a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40073c:	683b      	ldr	r3, [r7, #0]
  40073e:	2b00      	cmp	r3, #0
  400740:	d003      	beq.n	40074a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400742:	68fb      	ldr	r3, [r7, #12]
  400744:	68ba      	ldr	r2, [r7, #8]
  400746:	651a      	str	r2, [r3, #80]	; 0x50
  400748:	e002      	b.n	400750 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40074a:	68fb      	ldr	r3, [r7, #12]
  40074c:	68ba      	ldr	r2, [r7, #8]
  40074e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400750:	687b      	ldr	r3, [r7, #4]
  400752:	2b00      	cmp	r3, #0
  400754:	d003      	beq.n	40075e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400756:	68fb      	ldr	r3, [r7, #12]
  400758:	68ba      	ldr	r2, [r7, #8]
  40075a:	631a      	str	r2, [r3, #48]	; 0x30
  40075c:	e002      	b.n	400764 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	68ba      	ldr	r2, [r7, #8]
  400762:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400764:	68fb      	ldr	r3, [r7, #12]
  400766:	68ba      	ldr	r2, [r7, #8]
  400768:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	68ba      	ldr	r2, [r7, #8]
  40076e:	601a      	str	r2, [r3, #0]
}
  400770:	bf00      	nop
  400772:	3710      	adds	r7, #16
  400774:	46bd      	mov	sp, r7
  400776:	bd80      	pop	{r7, pc}
  400778:	004008fd 	.word	0x004008fd
  40077c:	00400529 	.word	0x00400529

00400780 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  400780:	b590      	push	{r4, r7, lr}
  400782:	b087      	sub	sp, #28
  400784:	af02      	add	r7, sp, #8
  400786:	60f8      	str	r0, [r7, #12]
  400788:	60b9      	str	r1, [r7, #8]
  40078a:	607a      	str	r2, [r7, #4]
  40078c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40078e:	68bb      	ldr	r3, [r7, #8]
  400790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400794:	d016      	beq.n	4007c4 <pio_configure+0x44>
  400796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40079a:	d809      	bhi.n	4007b0 <pio_configure+0x30>
  40079c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007a0:	d010      	beq.n	4007c4 <pio_configure+0x44>
  4007a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007a6:	d00d      	beq.n	4007c4 <pio_configure+0x44>
  4007a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007ac:	d00a      	beq.n	4007c4 <pio_configure+0x44>
  4007ae:	e03d      	b.n	40082c <pio_configure+0xac>
  4007b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007b4:	d01a      	beq.n	4007ec <pio_configure+0x6c>
  4007b6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007ba:	d017      	beq.n	4007ec <pio_configure+0x6c>
  4007bc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007c0:	d00e      	beq.n	4007e0 <pio_configure+0x60>
  4007c2:	e033      	b.n	40082c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4007c4:	687a      	ldr	r2, [r7, #4]
  4007c6:	68b9      	ldr	r1, [r7, #8]
  4007c8:	68f8      	ldr	r0, [r7, #12]
  4007ca:	4b1c      	ldr	r3, [pc, #112]	; (40083c <pio_configure+0xbc>)
  4007cc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4007ce:	683b      	ldr	r3, [r7, #0]
  4007d0:	f003 0301 	and.w	r3, r3, #1
  4007d4:	461a      	mov	r2, r3
  4007d6:	6879      	ldr	r1, [r7, #4]
  4007d8:	68f8      	ldr	r0, [r7, #12]
  4007da:	4b19      	ldr	r3, [pc, #100]	; (400840 <pio_configure+0xc0>)
  4007dc:	4798      	blx	r3
		break;
  4007de:	e027      	b.n	400830 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4007e0:	683a      	ldr	r2, [r7, #0]
  4007e2:	6879      	ldr	r1, [r7, #4]
  4007e4:	68f8      	ldr	r0, [r7, #12]
  4007e6:	4b17      	ldr	r3, [pc, #92]	; (400844 <pio_configure+0xc4>)
  4007e8:	4798      	blx	r3
		break;
  4007ea:	e021      	b.n	400830 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4007ec:	68bb      	ldr	r3, [r7, #8]
  4007ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f2:	bf0c      	ite	eq
  4007f4:	2301      	moveq	r3, #1
  4007f6:	2300      	movne	r3, #0
  4007f8:	b2db      	uxtb	r3, r3
  4007fa:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4007fc:	683b      	ldr	r3, [r7, #0]
  4007fe:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400802:	2b00      	cmp	r3, #0
  400804:	bf14      	ite	ne
  400806:	2301      	movne	r3, #1
  400808:	2300      	moveq	r3, #0
  40080a:	b2db      	uxtb	r3, r3
  40080c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40080e:	683b      	ldr	r3, [r7, #0]
  400810:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400814:	2b00      	cmp	r3, #0
  400816:	bf14      	ite	ne
  400818:	2301      	movne	r3, #1
  40081a:	2300      	moveq	r3, #0
  40081c:	b2db      	uxtb	r3, r3
  40081e:	9300      	str	r3, [sp, #0]
  400820:	460b      	mov	r3, r1
  400822:	6879      	ldr	r1, [r7, #4]
  400824:	68f8      	ldr	r0, [r7, #12]
  400826:	4c08      	ldr	r4, [pc, #32]	; (400848 <pio_configure+0xc8>)
  400828:	47a0      	blx	r4
		break;
  40082a:	e001      	b.n	400830 <pio_configure+0xb0>

	default:
		return 0;
  40082c:	2300      	movs	r3, #0
  40082e:	e000      	b.n	400832 <pio_configure+0xb2>
	}

	return 1;
  400830:	2301      	movs	r3, #1
}
  400832:	4618      	mov	r0, r3
  400834:	3714      	adds	r7, #20
  400836:	46bd      	mov	sp, r7
  400838:	bd90      	pop	{r4, r7, pc}
  40083a:	bf00      	nop
  40083c:	0040058d 	.word	0x0040058d
  400840:	00400529 	.word	0x00400529
  400844:	0040069d 	.word	0x0040069d
  400848:	0040071d 	.word	0x0040071d

0040084c <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  40084c:	b480      	push	{r7}
  40084e:	b083      	sub	sp, #12
  400850:	af00      	add	r7, sp, #0
  400852:	6078      	str	r0, [r7, #4]
  400854:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400856:	687b      	ldr	r3, [r7, #4]
  400858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40085a:	683b      	ldr	r3, [r7, #0]
  40085c:	4013      	ands	r3, r2
  40085e:	2b00      	cmp	r3, #0
  400860:	d101      	bne.n	400866 <pio_get_output_data_status+0x1a>
		return 0;
  400862:	2300      	movs	r3, #0
  400864:	e000      	b.n	400868 <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  400866:	2301      	movs	r3, #1
	}
}
  400868:	4618      	mov	r0, r3
  40086a:	370c      	adds	r7, #12
  40086c:	46bd      	mov	sp, r7
  40086e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400872:	4770      	bx	lr

00400874 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400874:	b480      	push	{r7}
  400876:	b085      	sub	sp, #20
  400878:	af00      	add	r7, sp, #0
  40087a:	60f8      	str	r0, [r7, #12]
  40087c:	60b9      	str	r1, [r7, #8]
  40087e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	f003 0310 	and.w	r3, r3, #16
  400886:	2b00      	cmp	r3, #0
  400888:	d020      	beq.n	4008cc <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40088a:	68fb      	ldr	r3, [r7, #12]
  40088c:	68ba      	ldr	r2, [r7, #8]
  40088e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400892:	687b      	ldr	r3, [r7, #4]
  400894:	f003 0320 	and.w	r3, r3, #32
  400898:	2b00      	cmp	r3, #0
  40089a:	d004      	beq.n	4008a6 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40089c:	68fb      	ldr	r3, [r7, #12]
  40089e:	68ba      	ldr	r2, [r7, #8]
  4008a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4008a4:	e003      	b.n	4008ae <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4008a6:	68fb      	ldr	r3, [r7, #12]
  4008a8:	68ba      	ldr	r2, [r7, #8]
  4008aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4008ae:	687b      	ldr	r3, [r7, #4]
  4008b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d004      	beq.n	4008c2 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4008b8:	68fb      	ldr	r3, [r7, #12]
  4008ba:	68ba      	ldr	r2, [r7, #8]
  4008bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4008c0:	e008      	b.n	4008d4 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	68ba      	ldr	r2, [r7, #8]
  4008c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4008ca:	e003      	b.n	4008d4 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4008cc:	68fb      	ldr	r3, [r7, #12]
  4008ce:	68ba      	ldr	r2, [r7, #8]
  4008d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4008d4:	bf00      	nop
  4008d6:	3714      	adds	r7, #20
  4008d8:	46bd      	mov	sp, r7
  4008da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008de:	4770      	bx	lr

004008e0 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4008e0:	b480      	push	{r7}
  4008e2:	b083      	sub	sp, #12
  4008e4:	af00      	add	r7, sp, #0
  4008e6:	6078      	str	r0, [r7, #4]
  4008e8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4008ea:	687b      	ldr	r3, [r7, #4]
  4008ec:	683a      	ldr	r2, [r7, #0]
  4008ee:	641a      	str	r2, [r3, #64]	; 0x40
}
  4008f0:	bf00      	nop
  4008f2:	370c      	adds	r7, #12
  4008f4:	46bd      	mov	sp, r7
  4008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008fa:	4770      	bx	lr

004008fc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4008fc:	b480      	push	{r7}
  4008fe:	b083      	sub	sp, #12
  400900:	af00      	add	r7, sp, #0
  400902:	6078      	str	r0, [r7, #4]
  400904:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400906:	687b      	ldr	r3, [r7, #4]
  400908:	683a      	ldr	r2, [r7, #0]
  40090a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40090c:	bf00      	nop
  40090e:	370c      	adds	r7, #12
  400910:	46bd      	mov	sp, r7
  400912:	f85d 7b04 	ldr.w	r7, [sp], #4
  400916:	4770      	bx	lr

00400918 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400918:	b480      	push	{r7}
  40091a:	b083      	sub	sp, #12
  40091c:	af00      	add	r7, sp, #0
  40091e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400920:	687b      	ldr	r3, [r7, #4]
  400922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400924:	4618      	mov	r0, r3
  400926:	370c      	adds	r7, #12
  400928:	46bd      	mov	sp, r7
  40092a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092e:	4770      	bx	lr

00400930 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400930:	b480      	push	{r7}
  400932:	b083      	sub	sp, #12
  400934:	af00      	add	r7, sp, #0
  400936:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400938:	687b      	ldr	r3, [r7, #4]
  40093a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40093c:	4618      	mov	r0, r3
  40093e:	370c      	adds	r7, #12
  400940:	46bd      	mov	sp, r7
  400942:	f85d 7b04 	ldr.w	r7, [sp], #4
  400946:	4770      	bx	lr

00400948 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400948:	b580      	push	{r7, lr}
  40094a:	b084      	sub	sp, #16
  40094c:	af00      	add	r7, sp, #0
  40094e:	6078      	str	r0, [r7, #4]
  400950:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400952:	6878      	ldr	r0, [r7, #4]
  400954:	4b26      	ldr	r3, [pc, #152]	; (4009f0 <pio_handler_process+0xa8>)
  400956:	4798      	blx	r3
  400958:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40095a:	6878      	ldr	r0, [r7, #4]
  40095c:	4b25      	ldr	r3, [pc, #148]	; (4009f4 <pio_handler_process+0xac>)
  40095e:	4798      	blx	r3
  400960:	4602      	mov	r2, r0
  400962:	68fb      	ldr	r3, [r7, #12]
  400964:	4013      	ands	r3, r2
  400966:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400968:	68fb      	ldr	r3, [r7, #12]
  40096a:	2b00      	cmp	r3, #0
  40096c:	d03c      	beq.n	4009e8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40096e:	2300      	movs	r3, #0
  400970:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400972:	e034      	b.n	4009de <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400974:	4a20      	ldr	r2, [pc, #128]	; (4009f8 <pio_handler_process+0xb0>)
  400976:	68bb      	ldr	r3, [r7, #8]
  400978:	011b      	lsls	r3, r3, #4
  40097a:	4413      	add	r3, r2
  40097c:	681a      	ldr	r2, [r3, #0]
  40097e:	683b      	ldr	r3, [r7, #0]
  400980:	429a      	cmp	r2, r3
  400982:	d126      	bne.n	4009d2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400984:	4a1c      	ldr	r2, [pc, #112]	; (4009f8 <pio_handler_process+0xb0>)
  400986:	68bb      	ldr	r3, [r7, #8]
  400988:	011b      	lsls	r3, r3, #4
  40098a:	4413      	add	r3, r2
  40098c:	3304      	adds	r3, #4
  40098e:	681a      	ldr	r2, [r3, #0]
  400990:	68fb      	ldr	r3, [r7, #12]
  400992:	4013      	ands	r3, r2
  400994:	2b00      	cmp	r3, #0
  400996:	d01c      	beq.n	4009d2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400998:	4a17      	ldr	r2, [pc, #92]	; (4009f8 <pio_handler_process+0xb0>)
  40099a:	68bb      	ldr	r3, [r7, #8]
  40099c:	011b      	lsls	r3, r3, #4
  40099e:	4413      	add	r3, r2
  4009a0:	330c      	adds	r3, #12
  4009a2:	681b      	ldr	r3, [r3, #0]
  4009a4:	4914      	ldr	r1, [pc, #80]	; (4009f8 <pio_handler_process+0xb0>)
  4009a6:	68ba      	ldr	r2, [r7, #8]
  4009a8:	0112      	lsls	r2, r2, #4
  4009aa:	440a      	add	r2, r1
  4009ac:	6810      	ldr	r0, [r2, #0]
  4009ae:	4912      	ldr	r1, [pc, #72]	; (4009f8 <pio_handler_process+0xb0>)
  4009b0:	68ba      	ldr	r2, [r7, #8]
  4009b2:	0112      	lsls	r2, r2, #4
  4009b4:	440a      	add	r2, r1
  4009b6:	3204      	adds	r2, #4
  4009b8:	6812      	ldr	r2, [r2, #0]
  4009ba:	4611      	mov	r1, r2
  4009bc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4009be:	4a0e      	ldr	r2, [pc, #56]	; (4009f8 <pio_handler_process+0xb0>)
  4009c0:	68bb      	ldr	r3, [r7, #8]
  4009c2:	011b      	lsls	r3, r3, #4
  4009c4:	4413      	add	r3, r2
  4009c6:	3304      	adds	r3, #4
  4009c8:	681b      	ldr	r3, [r3, #0]
  4009ca:	43db      	mvns	r3, r3
  4009cc:	68fa      	ldr	r2, [r7, #12]
  4009ce:	4013      	ands	r3, r2
  4009d0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4009d2:	68bb      	ldr	r3, [r7, #8]
  4009d4:	3301      	adds	r3, #1
  4009d6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009d8:	68bb      	ldr	r3, [r7, #8]
  4009da:	2b06      	cmp	r3, #6
  4009dc:	d803      	bhi.n	4009e6 <pio_handler_process+0x9e>
		while (status != 0) {
  4009de:	68fb      	ldr	r3, [r7, #12]
  4009e0:	2b00      	cmp	r3, #0
  4009e2:	d1c7      	bne.n	400974 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4009e4:	e000      	b.n	4009e8 <pio_handler_process+0xa0>
				break;
  4009e6:	bf00      	nop
}
  4009e8:	bf00      	nop
  4009ea:	3710      	adds	r7, #16
  4009ec:	46bd      	mov	sp, r7
  4009ee:	bd80      	pop	{r7, pc}
  4009f0:	00400919 	.word	0x00400919
  4009f4:	00400931 	.word	0x00400931
  4009f8:	20400460 	.word	0x20400460

004009fc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4009fc:	b580      	push	{r7, lr}
  4009fe:	b086      	sub	sp, #24
  400a00:	af00      	add	r7, sp, #0
  400a02:	60f8      	str	r0, [r7, #12]
  400a04:	60b9      	str	r1, [r7, #8]
  400a06:	607a      	str	r2, [r7, #4]
  400a08:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a0a:	4b21      	ldr	r3, [pc, #132]	; (400a90 <pio_handler_set+0x94>)
  400a0c:	681b      	ldr	r3, [r3, #0]
  400a0e:	2b06      	cmp	r3, #6
  400a10:	d901      	bls.n	400a16 <pio_handler_set+0x1a>
		return 1;
  400a12:	2301      	movs	r3, #1
  400a14:	e038      	b.n	400a88 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a16:	2300      	movs	r3, #0
  400a18:	75fb      	strb	r3, [r7, #23]
  400a1a:	e011      	b.n	400a40 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400a1c:	7dfb      	ldrb	r3, [r7, #23]
  400a1e:	011b      	lsls	r3, r3, #4
  400a20:	4a1c      	ldr	r2, [pc, #112]	; (400a94 <pio_handler_set+0x98>)
  400a22:	4413      	add	r3, r2
  400a24:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a26:	693b      	ldr	r3, [r7, #16]
  400a28:	681a      	ldr	r2, [r3, #0]
  400a2a:	68bb      	ldr	r3, [r7, #8]
  400a2c:	429a      	cmp	r2, r3
  400a2e:	d104      	bne.n	400a3a <pio_handler_set+0x3e>
  400a30:	693b      	ldr	r3, [r7, #16]
  400a32:	685a      	ldr	r2, [r3, #4]
  400a34:	687b      	ldr	r3, [r7, #4]
  400a36:	429a      	cmp	r2, r3
  400a38:	d008      	beq.n	400a4c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a3a:	7dfb      	ldrb	r3, [r7, #23]
  400a3c:	3301      	adds	r3, #1
  400a3e:	75fb      	strb	r3, [r7, #23]
  400a40:	7dfa      	ldrb	r2, [r7, #23]
  400a42:	4b13      	ldr	r3, [pc, #76]	; (400a90 <pio_handler_set+0x94>)
  400a44:	681b      	ldr	r3, [r3, #0]
  400a46:	429a      	cmp	r2, r3
  400a48:	d9e8      	bls.n	400a1c <pio_handler_set+0x20>
  400a4a:	e000      	b.n	400a4e <pio_handler_set+0x52>
			break;
  400a4c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a4e:	693b      	ldr	r3, [r7, #16]
  400a50:	68ba      	ldr	r2, [r7, #8]
  400a52:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400a54:	693b      	ldr	r3, [r7, #16]
  400a56:	687a      	ldr	r2, [r7, #4]
  400a58:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400a5a:	693b      	ldr	r3, [r7, #16]
  400a5c:	683a      	ldr	r2, [r7, #0]
  400a5e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400a60:	693b      	ldr	r3, [r7, #16]
  400a62:	6a3a      	ldr	r2, [r7, #32]
  400a64:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400a66:	7dfa      	ldrb	r2, [r7, #23]
  400a68:	4b09      	ldr	r3, [pc, #36]	; (400a90 <pio_handler_set+0x94>)
  400a6a:	681b      	ldr	r3, [r3, #0]
  400a6c:	3301      	adds	r3, #1
  400a6e:	429a      	cmp	r2, r3
  400a70:	d104      	bne.n	400a7c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400a72:	4b07      	ldr	r3, [pc, #28]	; (400a90 <pio_handler_set+0x94>)
  400a74:	681b      	ldr	r3, [r3, #0]
  400a76:	3301      	adds	r3, #1
  400a78:	4a05      	ldr	r2, [pc, #20]	; (400a90 <pio_handler_set+0x94>)
  400a7a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400a7c:	683a      	ldr	r2, [r7, #0]
  400a7e:	6879      	ldr	r1, [r7, #4]
  400a80:	68f8      	ldr	r0, [r7, #12]
  400a82:	4b05      	ldr	r3, [pc, #20]	; (400a98 <pio_handler_set+0x9c>)
  400a84:	4798      	blx	r3

	return 0;
  400a86:	2300      	movs	r3, #0
}
  400a88:	4618      	mov	r0, r3
  400a8a:	3718      	adds	r7, #24
  400a8c:	46bd      	mov	sp, r7
  400a8e:	bd80      	pop	{r7, pc}
  400a90:	204004d0 	.word	0x204004d0
  400a94:	20400460 	.word	0x20400460
  400a98:	00400875 	.word	0x00400875

00400a9c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a9c:	b580      	push	{r7, lr}
  400a9e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400aa0:	210a      	movs	r1, #10
  400aa2:	4802      	ldr	r0, [pc, #8]	; (400aac <PIOA_Handler+0x10>)
  400aa4:	4b02      	ldr	r3, [pc, #8]	; (400ab0 <PIOA_Handler+0x14>)
  400aa6:	4798      	blx	r3
}
  400aa8:	bf00      	nop
  400aaa:	bd80      	pop	{r7, pc}
  400aac:	400e0e00 	.word	0x400e0e00
  400ab0:	00400949 	.word	0x00400949

00400ab4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ab4:	b580      	push	{r7, lr}
  400ab6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400ab8:	210b      	movs	r1, #11
  400aba:	4802      	ldr	r0, [pc, #8]	; (400ac4 <PIOB_Handler+0x10>)
  400abc:	4b02      	ldr	r3, [pc, #8]	; (400ac8 <PIOB_Handler+0x14>)
  400abe:	4798      	blx	r3
}
  400ac0:	bf00      	nop
  400ac2:	bd80      	pop	{r7, pc}
  400ac4:	400e1000 	.word	0x400e1000
  400ac8:	00400949 	.word	0x00400949

00400acc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400acc:	b580      	push	{r7, lr}
  400ace:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400ad0:	210c      	movs	r1, #12
  400ad2:	4802      	ldr	r0, [pc, #8]	; (400adc <PIOC_Handler+0x10>)
  400ad4:	4b02      	ldr	r3, [pc, #8]	; (400ae0 <PIOC_Handler+0x14>)
  400ad6:	4798      	blx	r3
}
  400ad8:	bf00      	nop
  400ada:	bd80      	pop	{r7, pc}
  400adc:	400e1200 	.word	0x400e1200
  400ae0:	00400949 	.word	0x00400949

00400ae4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ae4:	b580      	push	{r7, lr}
  400ae6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400ae8:	2110      	movs	r1, #16
  400aea:	4802      	ldr	r0, [pc, #8]	; (400af4 <PIOD_Handler+0x10>)
  400aec:	4b02      	ldr	r3, [pc, #8]	; (400af8 <PIOD_Handler+0x14>)
  400aee:	4798      	blx	r3
}
  400af0:	bf00      	nop
  400af2:	bd80      	pop	{r7, pc}
  400af4:	400e1400 	.word	0x400e1400
  400af8:	00400949 	.word	0x00400949

00400afc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400afc:	b580      	push	{r7, lr}
  400afe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400b00:	2111      	movs	r1, #17
  400b02:	4802      	ldr	r0, [pc, #8]	; (400b0c <PIOE_Handler+0x10>)
  400b04:	4b02      	ldr	r3, [pc, #8]	; (400b10 <PIOE_Handler+0x14>)
  400b06:	4798      	blx	r3
}
  400b08:	bf00      	nop
  400b0a:	bd80      	pop	{r7, pc}
  400b0c:	400e1600 	.word	0x400e1600
  400b10:	00400949 	.word	0x00400949

00400b14 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400b14:	b480      	push	{r7}
  400b16:	b083      	sub	sp, #12
  400b18:	af00      	add	r7, sp, #0
  400b1a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400b1c:	687b      	ldr	r3, [r7, #4]
  400b1e:	3b01      	subs	r3, #1
  400b20:	2b03      	cmp	r3, #3
  400b22:	d81a      	bhi.n	400b5a <pmc_mck_set_division+0x46>
  400b24:	a201      	add	r2, pc, #4	; (adr r2, 400b2c <pmc_mck_set_division+0x18>)
  400b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b2a:	bf00      	nop
  400b2c:	00400b3d 	.word	0x00400b3d
  400b30:	00400b43 	.word	0x00400b43
  400b34:	00400b4b 	.word	0x00400b4b
  400b38:	00400b53 	.word	0x00400b53
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b3c:	2300      	movs	r3, #0
  400b3e:	607b      	str	r3, [r7, #4]
			break;
  400b40:	e00e      	b.n	400b60 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400b42:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b46:	607b      	str	r3, [r7, #4]
			break;
  400b48:	e00a      	b.n	400b60 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
  400b4e:	607b      	str	r3, [r7, #4]
			break;
  400b50:	e006      	b.n	400b60 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b52:	f44f 7300 	mov.w	r3, #512	; 0x200
  400b56:	607b      	str	r3, [r7, #4]
			break;
  400b58:	e002      	b.n	400b60 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b5a:	2300      	movs	r3, #0
  400b5c:	607b      	str	r3, [r7, #4]
			break;
  400b5e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400b60:	490a      	ldr	r1, [pc, #40]	; (400b8c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b62:	4b0a      	ldr	r3, [pc, #40]	; (400b8c <pmc_mck_set_division+0x78>)
  400b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400b6a:	687b      	ldr	r3, [r7, #4]
  400b6c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400b6e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b70:	bf00      	nop
  400b72:	4b06      	ldr	r3, [pc, #24]	; (400b8c <pmc_mck_set_division+0x78>)
  400b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b76:	f003 0308 	and.w	r3, r3, #8
  400b7a:	2b00      	cmp	r3, #0
  400b7c:	d0f9      	beq.n	400b72 <pmc_mck_set_division+0x5e>
}
  400b7e:	bf00      	nop
  400b80:	370c      	adds	r7, #12
  400b82:	46bd      	mov	sp, r7
  400b84:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b88:	4770      	bx	lr
  400b8a:	bf00      	nop
  400b8c:	400e0600 	.word	0x400e0600

00400b90 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b90:	b480      	push	{r7}
  400b92:	b085      	sub	sp, #20
  400b94:	af00      	add	r7, sp, #0
  400b96:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b98:	491d      	ldr	r1, [pc, #116]	; (400c10 <pmc_switch_mck_to_pllack+0x80>)
  400b9a:	4b1d      	ldr	r3, [pc, #116]	; (400c10 <pmc_switch_mck_to_pllack+0x80>)
  400b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400ba2:	687b      	ldr	r3, [r7, #4]
  400ba4:	4313      	orrs	r3, r2
  400ba6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bac:	60fb      	str	r3, [r7, #12]
  400bae:	e007      	b.n	400bc0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bb0:	68fb      	ldr	r3, [r7, #12]
  400bb2:	2b00      	cmp	r3, #0
  400bb4:	d101      	bne.n	400bba <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400bb6:	2301      	movs	r3, #1
  400bb8:	e023      	b.n	400c02 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bba:	68fb      	ldr	r3, [r7, #12]
  400bbc:	3b01      	subs	r3, #1
  400bbe:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bc0:	4b13      	ldr	r3, [pc, #76]	; (400c10 <pmc_switch_mck_to_pllack+0x80>)
  400bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bc4:	f003 0308 	and.w	r3, r3, #8
  400bc8:	2b00      	cmp	r3, #0
  400bca:	d0f1      	beq.n	400bb0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bcc:	4a10      	ldr	r2, [pc, #64]	; (400c10 <pmc_switch_mck_to_pllack+0x80>)
  400bce:	4b10      	ldr	r3, [pc, #64]	; (400c10 <pmc_switch_mck_to_pllack+0x80>)
  400bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bd2:	f023 0303 	bic.w	r3, r3, #3
  400bd6:	f043 0302 	orr.w	r3, r3, #2
  400bda:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400be0:	60fb      	str	r3, [r7, #12]
  400be2:	e007      	b.n	400bf4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400be4:	68fb      	ldr	r3, [r7, #12]
  400be6:	2b00      	cmp	r3, #0
  400be8:	d101      	bne.n	400bee <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bea:	2301      	movs	r3, #1
  400bec:	e009      	b.n	400c02 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bee:	68fb      	ldr	r3, [r7, #12]
  400bf0:	3b01      	subs	r3, #1
  400bf2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bf4:	4b06      	ldr	r3, [pc, #24]	; (400c10 <pmc_switch_mck_to_pllack+0x80>)
  400bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bf8:	f003 0308 	and.w	r3, r3, #8
  400bfc:	2b00      	cmp	r3, #0
  400bfe:	d0f1      	beq.n	400be4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400c00:	2300      	movs	r3, #0
}
  400c02:	4618      	mov	r0, r3
  400c04:	3714      	adds	r7, #20
  400c06:	46bd      	mov	sp, r7
  400c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop
  400c10:	400e0600 	.word	0x400e0600

00400c14 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400c14:	b480      	push	{r7}
  400c16:	b083      	sub	sp, #12
  400c18:	af00      	add	r7, sp, #0
  400c1a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400c1c:	687b      	ldr	r3, [r7, #4]
  400c1e:	2b01      	cmp	r3, #1
  400c20:	d105      	bne.n	400c2e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400c22:	4907      	ldr	r1, [pc, #28]	; (400c40 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c24:	4b06      	ldr	r3, [pc, #24]	; (400c40 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c26:	689a      	ldr	r2, [r3, #8]
  400c28:	4b06      	ldr	r3, [pc, #24]	; (400c44 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c2a:	4313      	orrs	r3, r2
  400c2c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c2e:	4b04      	ldr	r3, [pc, #16]	; (400c40 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c30:	4a05      	ldr	r2, [pc, #20]	; (400c48 <pmc_switch_sclk_to_32kxtal+0x34>)
  400c32:	601a      	str	r2, [r3, #0]
}
  400c34:	bf00      	nop
  400c36:	370c      	adds	r7, #12
  400c38:	46bd      	mov	sp, r7
  400c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c3e:	4770      	bx	lr
  400c40:	400e1810 	.word	0x400e1810
  400c44:	a5100000 	.word	0xa5100000
  400c48:	a5000008 	.word	0xa5000008

00400c4c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c4c:	b480      	push	{r7}
  400c4e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c50:	4b09      	ldr	r3, [pc, #36]	; (400c78 <pmc_osc_is_ready_32kxtal+0x2c>)
  400c52:	695b      	ldr	r3, [r3, #20]
  400c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c58:	2b00      	cmp	r3, #0
  400c5a:	d007      	beq.n	400c6c <pmc_osc_is_ready_32kxtal+0x20>
  400c5c:	4b07      	ldr	r3, [pc, #28]	; (400c7c <pmc_osc_is_ready_32kxtal+0x30>)
  400c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c64:	2b00      	cmp	r3, #0
  400c66:	d001      	beq.n	400c6c <pmc_osc_is_ready_32kxtal+0x20>
  400c68:	2301      	movs	r3, #1
  400c6a:	e000      	b.n	400c6e <pmc_osc_is_ready_32kxtal+0x22>
  400c6c:	2300      	movs	r3, #0
}
  400c6e:	4618      	mov	r0, r3
  400c70:	46bd      	mov	sp, r7
  400c72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c76:	4770      	bx	lr
  400c78:	400e1810 	.word	0x400e1810
  400c7c:	400e0600 	.word	0x400e0600

00400c80 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c80:	b480      	push	{r7}
  400c82:	b083      	sub	sp, #12
  400c84:	af00      	add	r7, sp, #0
  400c86:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c88:	4915      	ldr	r1, [pc, #84]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400c8a:	4b15      	ldr	r3, [pc, #84]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400c8c:	6a1a      	ldr	r2, [r3, #32]
  400c8e:	4b15      	ldr	r3, [pc, #84]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x64>)
  400c90:	4313      	orrs	r3, r2
  400c92:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c94:	bf00      	nop
  400c96:	4b12      	ldr	r3, [pc, #72]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c9e:	2b00      	cmp	r3, #0
  400ca0:	d0f9      	beq.n	400c96 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ca2:	490f      	ldr	r1, [pc, #60]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400ca4:	4b0e      	ldr	r3, [pc, #56]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400ca6:	6a1a      	ldr	r2, [r3, #32]
  400ca8:	4b0f      	ldr	r3, [pc, #60]	; (400ce8 <pmc_switch_mainck_to_fastrc+0x68>)
  400caa:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400cac:	687a      	ldr	r2, [r7, #4]
  400cae:	4313      	orrs	r3, r2
  400cb0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400cb4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400cb6:	bf00      	nop
  400cb8:	4b09      	ldr	r3, [pc, #36]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d0f9      	beq.n	400cb8 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400cc4:	4906      	ldr	r1, [pc, #24]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400cc6:	4b06      	ldr	r3, [pc, #24]	; (400ce0 <pmc_switch_mainck_to_fastrc+0x60>)
  400cc8:	6a1a      	ldr	r2, [r3, #32]
  400cca:	4b08      	ldr	r3, [pc, #32]	; (400cec <pmc_switch_mainck_to_fastrc+0x6c>)
  400ccc:	4013      	ands	r3, r2
  400cce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400cd2:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400cd4:	bf00      	nop
  400cd6:	370c      	adds	r7, #12
  400cd8:	46bd      	mov	sp, r7
  400cda:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cde:	4770      	bx	lr
  400ce0:	400e0600 	.word	0x400e0600
  400ce4:	00370008 	.word	0x00370008
  400ce8:	ffc8ff8f 	.word	0xffc8ff8f
  400cec:	fec8ffff 	.word	0xfec8ffff

00400cf0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cf0:	b480      	push	{r7}
  400cf2:	b083      	sub	sp, #12
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	6078      	str	r0, [r7, #4]
  400cf8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400cfa:	687b      	ldr	r3, [r7, #4]
  400cfc:	2b00      	cmp	r3, #0
  400cfe:	d008      	beq.n	400d12 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d00:	4913      	ldr	r1, [pc, #76]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d02:	4b13      	ldr	r3, [pc, #76]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d04:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d06:	4a13      	ldr	r2, [pc, #76]	; (400d54 <pmc_switch_mainck_to_xtal+0x64>)
  400d08:	401a      	ands	r2, r3
  400d0a:	4b13      	ldr	r3, [pc, #76]	; (400d58 <pmc_switch_mainck_to_xtal+0x68>)
  400d0c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d0e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400d10:	e018      	b.n	400d44 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d12:	490f      	ldr	r1, [pc, #60]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d14:	4b0e      	ldr	r3, [pc, #56]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d16:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d18:	4b10      	ldr	r3, [pc, #64]	; (400d5c <pmc_switch_mainck_to_xtal+0x6c>)
  400d1a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d1c:	683a      	ldr	r2, [r7, #0]
  400d1e:	0212      	lsls	r2, r2, #8
  400d20:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d22:	431a      	orrs	r2, r3
  400d24:	4b0e      	ldr	r3, [pc, #56]	; (400d60 <pmc_switch_mainck_to_xtal+0x70>)
  400d26:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d28:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d2a:	bf00      	nop
  400d2c:	4b08      	ldr	r3, [pc, #32]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d30:	f003 0301 	and.w	r3, r3, #1
  400d34:	2b00      	cmp	r3, #0
  400d36:	d0f9      	beq.n	400d2c <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d38:	4905      	ldr	r1, [pc, #20]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d3a:	4b05      	ldr	r3, [pc, #20]	; (400d50 <pmc_switch_mainck_to_xtal+0x60>)
  400d3c:	6a1a      	ldr	r2, [r3, #32]
  400d3e:	4b09      	ldr	r3, [pc, #36]	; (400d64 <pmc_switch_mainck_to_xtal+0x74>)
  400d40:	4313      	orrs	r3, r2
  400d42:	620b      	str	r3, [r1, #32]
}
  400d44:	bf00      	nop
  400d46:	370c      	adds	r7, #12
  400d48:	46bd      	mov	sp, r7
  400d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d4e:	4770      	bx	lr
  400d50:	400e0600 	.word	0x400e0600
  400d54:	fec8fffc 	.word	0xfec8fffc
  400d58:	01370002 	.word	0x01370002
  400d5c:	ffc8fffc 	.word	0xffc8fffc
  400d60:	00370001 	.word	0x00370001
  400d64:	01370000 	.word	0x01370000

00400d68 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d68:	b480      	push	{r7}
  400d6a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d6c:	4b04      	ldr	r3, [pc, #16]	; (400d80 <pmc_osc_is_ready_mainck+0x18>)
  400d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d74:	4618      	mov	r0, r3
  400d76:	46bd      	mov	sp, r7
  400d78:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d7c:	4770      	bx	lr
  400d7e:	bf00      	nop
  400d80:	400e0600 	.word	0x400e0600

00400d84 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d84:	b480      	push	{r7}
  400d86:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d88:	4b04      	ldr	r3, [pc, #16]	; (400d9c <pmc_disable_pllack+0x18>)
  400d8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d90:	bf00      	nop
  400d92:	46bd      	mov	sp, r7
  400d94:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d98:	4770      	bx	lr
  400d9a:	bf00      	nop
  400d9c:	400e0600 	.word	0x400e0600

00400da0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400da0:	b480      	push	{r7}
  400da2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400da4:	4b04      	ldr	r3, [pc, #16]	; (400db8 <pmc_is_locked_pllack+0x18>)
  400da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400da8:	f003 0302 	and.w	r3, r3, #2
}
  400dac:	4618      	mov	r0, r3
  400dae:	46bd      	mov	sp, r7
  400db0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400db4:	4770      	bx	lr
  400db6:	bf00      	nop
  400db8:	400e0600 	.word	0x400e0600

00400dbc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400dbc:	b480      	push	{r7}
  400dbe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400dc0:	4b04      	ldr	r3, [pc, #16]	; (400dd4 <pmc_is_locked_upll+0x18>)
  400dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400dc8:	4618      	mov	r0, r3
  400dca:	46bd      	mov	sp, r7
  400dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	400e0600 	.word	0x400e0600

00400dd8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400dd8:	b480      	push	{r7}
  400dda:	b083      	sub	sp, #12
  400ddc:	af00      	add	r7, sp, #0
  400dde:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400de0:	687b      	ldr	r3, [r7, #4]
  400de2:	2b3f      	cmp	r3, #63	; 0x3f
  400de4:	d901      	bls.n	400dea <pmc_enable_periph_clk+0x12>
		return 1;
  400de6:	2301      	movs	r3, #1
  400de8:	e02f      	b.n	400e4a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400dea:	687b      	ldr	r3, [r7, #4]
  400dec:	2b1f      	cmp	r3, #31
  400dee:	d813      	bhi.n	400e18 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400df0:	4b19      	ldr	r3, [pc, #100]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400df2:	699a      	ldr	r2, [r3, #24]
  400df4:	2101      	movs	r1, #1
  400df6:	687b      	ldr	r3, [r7, #4]
  400df8:	fa01 f303 	lsl.w	r3, r1, r3
  400dfc:	401a      	ands	r2, r3
  400dfe:	2101      	movs	r1, #1
  400e00:	687b      	ldr	r3, [r7, #4]
  400e02:	fa01 f303 	lsl.w	r3, r1, r3
  400e06:	429a      	cmp	r2, r3
  400e08:	d01e      	beq.n	400e48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e0a:	4a13      	ldr	r2, [pc, #76]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400e0c:	2101      	movs	r1, #1
  400e0e:	687b      	ldr	r3, [r7, #4]
  400e10:	fa01 f303 	lsl.w	r3, r1, r3
  400e14:	6113      	str	r3, [r2, #16]
  400e16:	e017      	b.n	400e48 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e18:	687b      	ldr	r3, [r7, #4]
  400e1a:	3b20      	subs	r3, #32
  400e1c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e1e:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400e20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e24:	2101      	movs	r1, #1
  400e26:	687b      	ldr	r3, [r7, #4]
  400e28:	fa01 f303 	lsl.w	r3, r1, r3
  400e2c:	401a      	ands	r2, r3
  400e2e:	2101      	movs	r1, #1
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	fa01 f303 	lsl.w	r3, r1, r3
  400e36:	429a      	cmp	r2, r3
  400e38:	d006      	beq.n	400e48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e3a:	4a07      	ldr	r2, [pc, #28]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400e3c:	2101      	movs	r1, #1
  400e3e:	687b      	ldr	r3, [r7, #4]
  400e40:	fa01 f303 	lsl.w	r3, r1, r3
  400e44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e48:	2300      	movs	r3, #0
}
  400e4a:	4618      	mov	r0, r3
  400e4c:	370c      	adds	r7, #12
  400e4e:	46bd      	mov	sp, r7
  400e50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e54:	4770      	bx	lr
  400e56:	bf00      	nop
  400e58:	400e0600 	.word	0x400e0600

00400e5c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400e5c:	b480      	push	{r7}
  400e5e:	b083      	sub	sp, #12
  400e60:	af00      	add	r7, sp, #0
  400e62:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  400e64:	4a04      	ldr	r2, [pc, #16]	; (400e78 <pmc_set_flash_in_wait_mode+0x1c>)
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	6013      	str	r3, [r2, #0]
}
  400e6a:	bf00      	nop
  400e6c:	370c      	adds	r7, #12
  400e6e:	46bd      	mov	sp, r7
  400e70:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e74:	4770      	bx	lr
  400e76:	bf00      	nop
  400e78:	2040000c 	.word	0x2040000c

00400e7c <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  400e7c:	b480      	push	{r7}
  400e7e:	b083      	sub	sp, #12
  400e80:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400e82:	4b20      	ldr	r3, [pc, #128]	; (400f04 <pmc_enable_waitmode+0x88>)
  400e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e86:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400e88:	687b      	ldr	r3, [r7, #4]
  400e8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400e8e:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400e90:	687b      	ldr	r3, [r7, #4]
  400e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400e96:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  400e98:	4a1a      	ldr	r2, [pc, #104]	; (400f04 <pmc_enable_waitmode+0x88>)
  400e9a:	687b      	ldr	r3, [r7, #4]
  400e9c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400e9e:	4919      	ldr	r1, [pc, #100]	; (400f04 <pmc_enable_waitmode+0x88>)
  400ea0:	4b18      	ldr	r3, [pc, #96]	; (400f04 <pmc_enable_waitmode+0x88>)
  400ea2:	6a1a      	ldr	r2, [r3, #32]
  400ea4:	4b18      	ldr	r3, [pc, #96]	; (400f08 <pmc_enable_waitmode+0x8c>)
  400ea6:	4313      	orrs	r3, r2
  400ea8:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400eaa:	bf00      	nop
  400eac:	4b15      	ldr	r3, [pc, #84]	; (400f04 <pmc_enable_waitmode+0x88>)
  400eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400eb0:	f003 0308 	and.w	r3, r3, #8
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d0f9      	beq.n	400eac <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400eb8:	2300      	movs	r3, #0
  400eba:	607b      	str	r3, [r7, #4]
  400ebc:	e003      	b.n	400ec6 <pmc_enable_waitmode+0x4a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400ebe:	bf00      	nop
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	3301      	adds	r3, #1
  400ec4:	607b      	str	r3, [r7, #4]
  400ec6:	687b      	ldr	r3, [r7, #4]
  400ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  400ecc:	d3f7      	bcc.n	400ebe <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400ece:	bf00      	nop
  400ed0:	4b0c      	ldr	r3, [pc, #48]	; (400f04 <pmc_enable_waitmode+0x88>)
  400ed2:	6a1b      	ldr	r3, [r3, #32]
  400ed4:	f003 0308 	and.w	r3, r3, #8
  400ed8:	2b00      	cmp	r3, #0
  400eda:	d0f9      	beq.n	400ed0 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400edc:	4b09      	ldr	r3, [pc, #36]	; (400f04 <pmc_enable_waitmode+0x88>)
  400ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ee0:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400ee2:	687b      	ldr	r3, [r7, #4]
  400ee4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400ee8:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400ef0:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  400ef2:	4a04      	ldr	r2, [pc, #16]	; (400f04 <pmc_enable_waitmode+0x88>)
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  400ef8:	bf00      	nop
  400efa:	370c      	adds	r7, #12
  400efc:	46bd      	mov	sp, r7
  400efe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f02:	4770      	bx	lr
  400f04:	400e0600 	.word	0x400e0600
  400f08:	00370004 	.word	0x00370004

00400f0c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400f0c:	b590      	push	{r4, r7, lr}
  400f0e:	b099      	sub	sp, #100	; 0x64
  400f10:	af00      	add	r7, sp, #0
  400f12:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  400f14:	687b      	ldr	r3, [r7, #4]
  400f16:	3b01      	subs	r3, #1
  400f18:	2b04      	cmp	r3, #4
  400f1a:	f200 81a3 	bhi.w	401264 <pmc_sleep+0x358>
  400f1e:	a201      	add	r2, pc, #4	; (adr r2, 400f24 <pmc_sleep+0x18>)
  400f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f24:	00400f39 	.word	0x00400f39
  400f28:	00400f39 	.word	0x00400f39
  400f2c:	00400f55 	.word	0x00400f55
  400f30:	00400f55 	.word	0x00400f55
  400f34:	00401243 	.word	0x00401243
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400f38:	4a71      	ldr	r2, [pc, #452]	; (401100 <pmc_sleep+0x1f4>)
  400f3a:	4b71      	ldr	r3, [pc, #452]	; (401100 <pmc_sleep+0x1f4>)
  400f3c:	691b      	ldr	r3, [r3, #16]
  400f3e:	f023 0304 	bic.w	r3, r3, #4
  400f42:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400f44:	4b6f      	ldr	r3, [pc, #444]	; (401104 <pmc_sleep+0x1f8>)
  400f46:	2201      	movs	r2, #1
  400f48:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400f4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400f4e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400f50:	bf30      	wfi
		__WFI();
		break;
  400f52:	e187      	b.n	401264 <pmc_sleep+0x358>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	2b03      	cmp	r3, #3
  400f58:	d103      	bne.n	400f62 <pmc_sleep+0x56>
  400f5a:	2000      	movs	r0, #0
  400f5c:	4b6a      	ldr	r3, [pc, #424]	; (401108 <pmc_sleep+0x1fc>)
  400f5e:	4798      	blx	r3
  400f60:	e003      	b.n	400f6a <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400f62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400f66:	4b68      	ldr	r3, [pc, #416]	; (401108 <pmc_sleep+0x1fc>)
  400f68:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400f6a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400f6c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400f70:	4b64      	ldr	r3, [pc, #400]	; (401104 <pmc_sleep+0x1f8>)
  400f72:	2200      	movs	r2, #0
  400f74:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400f76:	4b65      	ldr	r3, [pc, #404]	; (40110c <pmc_sleep+0x200>)
  400f78:	2201      	movs	r2, #1
  400f7a:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  400f7c:	687b      	ldr	r3, [r7, #4]
  400f7e:	2b04      	cmp	r3, #4
  400f80:	bf0c      	ite	eq
  400f82:	2301      	moveq	r3, #1
  400f84:	2300      	movne	r3, #0
  400f86:	b2da      	uxtb	r2, r3
  400f88:	f107 031c 	add.w	r3, r7, #28
  400f8c:	643b      	str	r3, [r7, #64]	; 0x40
  400f8e:	f107 0318 	add.w	r3, r7, #24
  400f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  400f94:	f107 0314 	add.w	r3, r7, #20
  400f98:	63bb      	str	r3, [r7, #56]	; 0x38
  400f9a:	f107 0310 	add.w	r3, r7, #16
  400f9e:	637b      	str	r3, [r7, #52]	; 0x34
  400fa0:	f107 030c 	add.w	r3, r7, #12
  400fa4:	633b      	str	r3, [r7, #48]	; 0x30
  400fa6:	4613      	mov	r3, r2
  400fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  400fac:	4b58      	ldr	r3, [pc, #352]	; (401110 <pmc_sleep+0x204>)
  400fae:	6a1b      	ldr	r3, [r3, #32]
  400fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  400fb2:	4b57      	ldr	r3, [pc, #348]	; (401110 <pmc_sleep+0x204>)
  400fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fb6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  400fb8:	4b56      	ldr	r3, [pc, #344]	; (401114 <pmc_sleep+0x208>)
  400fba:	681b      	ldr	r3, [r3, #0]
  400fbc:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  400fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400fc0:	2b00      	cmp	r3, #0
  400fc2:	d002      	beq.n	400fca <pmc_sleep+0xbe>
		*p_osc_setting = mor;
  400fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400fc8:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  400fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400fcc:	2b00      	cmp	r3, #0
  400fce:	d003      	beq.n	400fd8 <pmc_sleep+0xcc>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400fd0:	4b4f      	ldr	r3, [pc, #316]	; (401110 <pmc_sleep+0x204>)
  400fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  400fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400fd6:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  400fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d002      	beq.n	400fe4 <pmc_sleep+0xd8>
		*p_pll1_setting = 0;
  400fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400fe0:	2200      	movs	r2, #0
  400fe2:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  400fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d002      	beq.n	400ff0 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  400fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400fee:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  400ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	d002      	beq.n	400ffc <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  400ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ff8:	6a3a      	ldr	r2, [r7, #32]
  400ffa:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400ffc:	4944      	ldr	r1, [pc, #272]	; (401110 <pmc_sleep+0x204>)
  400ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
  401000:	4b45      	ldr	r3, [pc, #276]	; (401118 <pmc_sleep+0x20c>)
  401002:	4313      	orrs	r3, r2
  401004:	620b      	str	r3, [r1, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401008:	f003 0303 	and.w	r3, r3, #3
  40100c:	2b01      	cmp	r3, #1
  40100e:	d90e      	bls.n	40102e <pmc_sleep+0x122>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401012:	f023 0303 	bic.w	r3, r3, #3
  401016:	f043 0301 	orr.w	r3, r3, #1
  40101a:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  40101c:	4a3c      	ldr	r2, [pc, #240]	; (401110 <pmc_sleep+0x204>)
  40101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401020:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401022:	4b3b      	ldr	r3, [pc, #236]	; (401110 <pmc_sleep+0x204>)
  401024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401026:	f003 0308 	and.w	r3, r3, #8
  40102a:	2b00      	cmp	r3, #0
  40102c:	d0f9      	beq.n	401022 <pmc_sleep+0x116>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401030:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401034:	2b00      	cmp	r3, #0
  401036:	d00c      	beq.n	401052 <pmc_sleep+0x146>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40103a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40103e:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  401040:	4a33      	ldr	r2, [pc, #204]	; (401110 <pmc_sleep+0x204>)
  401042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401044:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401046:	4b32      	ldr	r3, [pc, #200]	; (401110 <pmc_sleep+0x204>)
  401048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40104a:	f003 0308 	and.w	r3, r3, #8
  40104e:	2b00      	cmp	r3, #0
  401050:	d0f9      	beq.n	401046 <pmc_sleep+0x13a>
	pmc_disable_pllack();
  401052:	4b32      	ldr	r3, [pc, #200]	; (40111c <pmc_sleep+0x210>)
  401054:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401056:	4b2e      	ldr	r3, [pc, #184]	; (401110 <pmc_sleep+0x204>)
  401058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40105e:	2b00      	cmp	r3, #0
  401060:	d0f9      	beq.n	401056 <pmc_sleep+0x14a>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401062:	492b      	ldr	r1, [pc, #172]	; (401110 <pmc_sleep+0x204>)
  401064:	4b2a      	ldr	r3, [pc, #168]	; (401110 <pmc_sleep+0x204>)
  401066:	6a1a      	ldr	r2, [r3, #32]
  401068:	4b2d      	ldr	r3, [pc, #180]	; (401120 <pmc_sleep+0x214>)
  40106a:	4013      	ands	r3, r2
  40106c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401070:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401072:	4b27      	ldr	r3, [pc, #156]	; (401110 <pmc_sleep+0x204>)
  401074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40107a:	2b00      	cmp	r3, #0
  40107c:	d0f9      	beq.n	401072 <pmc_sleep+0x166>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40107e:	4a25      	ldr	r2, [pc, #148]	; (401114 <pmc_sleep+0x208>)
  401080:	6a3b      	ldr	r3, [r7, #32]
  401082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  401086:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40108c:	2b00      	cmp	r3, #0
  40108e:	d007      	beq.n	4010a0 <pmc_sleep+0x194>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401090:	491f      	ldr	r1, [pc, #124]	; (401110 <pmc_sleep+0x204>)
  401092:	4b1f      	ldr	r3, [pc, #124]	; (401110 <pmc_sleep+0x204>)
  401094:	6a1a      	ldr	r2, [r3, #32]
  401096:	4b23      	ldr	r3, [pc, #140]	; (401124 <pmc_sleep+0x218>)
  401098:	4013      	ands	r3, r2
  40109a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40109e:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4010a0:	4b18      	ldr	r3, [pc, #96]	; (401104 <pmc_sleep+0x1f8>)
  4010a2:	2201      	movs	r2, #1
  4010a4:	701a      	strb	r2, [r3, #0]
  4010a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010aa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4010ac:	4b1e      	ldr	r3, [pc, #120]	; (401128 <pmc_sleep+0x21c>)
  4010ae:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4010b0:	b672      	cpsid	i
  4010b2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4010b6:	4b13      	ldr	r3, [pc, #76]	; (401104 <pmc_sleep+0x1f8>)
  4010b8:	2200      	movs	r2, #0
  4010ba:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  4010bc:	69fc      	ldr	r4, [r7, #28]
  4010be:	69b8      	ldr	r0, [r7, #24]
  4010c0:	6979      	ldr	r1, [r7, #20]
  4010c2:	693a      	ldr	r2, [r7, #16]
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	65fc      	str	r4, [r7, #92]	; 0x5c
  4010c8:	65b8      	str	r0, [r7, #88]	; 0x58
  4010ca:	6579      	str	r1, [r7, #84]	; 0x54
  4010cc:	653a      	str	r2, [r7, #80]	; 0x50
  4010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  4010d0:	2300      	movs	r3, #0
  4010d2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4010d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4010d6:	f003 0302 	and.w	r3, r3, #2
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d02c      	beq.n	401138 <pmc_sleep+0x22c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010de:	490c      	ldr	r1, [pc, #48]	; (401110 <pmc_sleep+0x204>)
  4010e0:	4b0b      	ldr	r3, [pc, #44]	; (401110 <pmc_sleep+0x204>)
  4010e2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4010e4:	4a11      	ldr	r2, [pc, #68]	; (40112c <pmc_sleep+0x220>)
  4010e6:	401a      	ands	r2, r3
  4010e8:	4b11      	ldr	r3, [pc, #68]	; (401130 <pmc_sleep+0x224>)
  4010ea:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010ec:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010ee:	4908      	ldr	r1, [pc, #32]	; (401110 <pmc_sleep+0x204>)
  4010f0:	4b07      	ldr	r3, [pc, #28]	; (401110 <pmc_sleep+0x204>)
  4010f2:	6a1a      	ldr	r2, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  4010f4:	4b0f      	ldr	r3, [pc, #60]	; (401134 <pmc_sleep+0x228>)
  4010f6:	4013      	ands	r3, r2
  4010f8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010fc:	620b      	str	r3, [r1, #32]
  4010fe:	e04e      	b.n	40119e <pmc_sleep+0x292>
  401100:	e000ed00 	.word	0xe000ed00
  401104:	2040000a 	.word	0x2040000a
  401108:	00400e5d 	.word	0x00400e5d
  40110c:	204004d4 	.word	0x204004d4
  401110:	400e0600 	.word	0x400e0600
  401114:	400e0c00 	.word	0x400e0c00
  401118:	00370008 	.word	0x00370008
  40111c:	00400d85 	.word	0x00400d85
  401120:	fec8ffff 	.word	0xfec8ffff
  401124:	ffc8fffe 	.word	0xffc8fffe
  401128:	00400e7d 	.word	0x00400e7d
  40112c:	fec8fffc 	.word	0xfec8fffc
  401130:	01370002 	.word	0x01370002
  401134:	ffc8ff87 	.word	0xffc8ff87
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40113a:	f003 0301 	and.w	r3, r3, #1
  40113e:	2b00      	cmp	r3, #0
  401140:	d02d      	beq.n	40119e <pmc_sleep+0x292>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  401142:	4b4a      	ldr	r3, [pc, #296]	; (40126c <pmc_sleep+0x360>)
  401144:	6a1b      	ldr	r3, [r3, #32]
  401146:	f003 0301 	and.w	r3, r3, #1
  40114a:	2b00      	cmp	r3, #0
  40114c:	d10d      	bne.n	40116a <pmc_sleep+0x25e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40114e:	4947      	ldr	r1, [pc, #284]	; (40126c <pmc_sleep+0x360>)
  401150:	4b46      	ldr	r3, [pc, #280]	; (40126c <pmc_sleep+0x360>)
  401152:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401154:	4a46      	ldr	r2, [pc, #280]	; (401270 <pmc_sleep+0x364>)
  401156:	401a      	ands	r2, r3
  401158:	4b46      	ldr	r3, [pc, #280]	; (401274 <pmc_sleep+0x368>)
  40115a:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40115c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40115e:	4b43      	ldr	r3, [pc, #268]	; (40126c <pmc_sleep+0x360>)
  401160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401162:	f003 0301 	and.w	r3, r3, #1
  401166:	2b00      	cmp	r3, #0
  401168:	d0f9      	beq.n	40115e <pmc_sleep+0x252>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40116a:	4b40      	ldr	r3, [pc, #256]	; (40126c <pmc_sleep+0x360>)
  40116c:	6a1b      	ldr	r3, [r3, #32]
  40116e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401172:	2b00      	cmp	r3, #0
  401174:	d10b      	bne.n	40118e <pmc_sleep+0x282>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401176:	493d      	ldr	r1, [pc, #244]	; (40126c <pmc_sleep+0x360>)
  401178:	4b3c      	ldr	r3, [pc, #240]	; (40126c <pmc_sleep+0x360>)
  40117a:	6a1a      	ldr	r2, [r3, #32]
  40117c:	4b3e      	ldr	r3, [pc, #248]	; (401278 <pmc_sleep+0x36c>)
  40117e:	4313      	orrs	r3, r2
  401180:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401182:	4b3a      	ldr	r3, [pc, #232]	; (40126c <pmc_sleep+0x360>)
  401184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40118a:	2b00      	cmp	r3, #0
  40118c:	d0f9      	beq.n	401182 <pmc_sleep+0x276>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40118e:	4937      	ldr	r1, [pc, #220]	; (40126c <pmc_sleep+0x360>)
  401190:	4b36      	ldr	r3, [pc, #216]	; (40126c <pmc_sleep+0x360>)
  401192:	6a1a      	ldr	r2, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  401194:	4b39      	ldr	r3, [pc, #228]	; (40127c <pmc_sleep+0x370>)
  401196:	4013      	ands	r3, r2
  401198:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40119c:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40119e:	6dba      	ldr	r2, [r7, #88]	; 0x58
  4011a0:	4b37      	ldr	r3, [pc, #220]	; (401280 <pmc_sleep+0x374>)
  4011a2:	4013      	ands	r3, r2
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d008      	beq.n	4011ba <pmc_sleep+0x2ae>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4011a8:	4a30      	ldr	r2, [pc, #192]	; (40126c <pmc_sleep+0x360>)
  4011aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4011ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4011b0:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4011b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4011b4:	f043 0302 	orr.w	r3, r3, #2
  4011b8:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4011ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4011bc:	f003 0303 	and.w	r3, r3, #3
  4011c0:	2b02      	cmp	r3, #2
  4011c2:	d105      	bne.n	4011d0 <pmc_sleep+0x2c4>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4011c4:	4b29      	ldr	r3, [pc, #164]	; (40126c <pmc_sleep+0x360>)
  4011c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011c8:	f003 0302 	and.w	r3, r3, #2
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d0f9      	beq.n	4011c4 <pmc_sleep+0x2b8>
	mckr = PMC->PMC_MCKR;
  4011d0:	4b26      	ldr	r3, [pc, #152]	; (40126c <pmc_sleep+0x360>)
  4011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011d4:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4011d6:	4925      	ldr	r1, [pc, #148]	; (40126c <pmc_sleep+0x360>)
  4011d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4011da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4011de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4011e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011e4:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4011e6:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011e8:	4b20      	ldr	r3, [pc, #128]	; (40126c <pmc_sleep+0x360>)
  4011ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011ec:	f003 0308 	and.w	r3, r3, #8
  4011f0:	2b00      	cmp	r3, #0
  4011f2:	d0f9      	beq.n	4011e8 <pmc_sleep+0x2dc>
	EFC0->EEFC_FMR = fmr_setting;
  4011f4:	4a23      	ldr	r2, [pc, #140]	; (401284 <pmc_sleep+0x378>)
  4011f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4011f8:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  4011fa:	4a1c      	ldr	r2, [pc, #112]	; (40126c <pmc_sleep+0x360>)
  4011fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4011fe:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401200:	4b1a      	ldr	r3, [pc, #104]	; (40126c <pmc_sleep+0x360>)
  401202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401204:	f003 0308 	and.w	r3, r3, #8
  401208:	2b00      	cmp	r3, #0
  40120a:	d0f9      	beq.n	401200 <pmc_sleep+0x2f4>
	while (!(PMC->PMC_SR & pll_sr));
  40120c:	4b17      	ldr	r3, [pc, #92]	; (40126c <pmc_sleep+0x360>)
  40120e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  401210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  401212:	4013      	ands	r3, r2
  401214:	2b00      	cmp	r3, #0
  401216:	d0f9      	beq.n	40120c <pmc_sleep+0x300>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401218:	4b1b      	ldr	r3, [pc, #108]	; (401288 <pmc_sleep+0x37c>)
  40121a:	2200      	movs	r2, #0
  40121c:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40121e:	4b1b      	ldr	r3, [pc, #108]	; (40128c <pmc_sleep+0x380>)
  401220:	681b      	ldr	r3, [r3, #0]
  401222:	2b00      	cmp	r3, #0
  401224:	d005      	beq.n	401232 <pmc_sleep+0x326>
			callback_clocks_restored();
  401226:	4b19      	ldr	r3, [pc, #100]	; (40128c <pmc_sleep+0x380>)
  401228:	681b      	ldr	r3, [r3, #0]
  40122a:	4798      	blx	r3
			callback_clocks_restored = NULL;
  40122c:	4b17      	ldr	r3, [pc, #92]	; (40128c <pmc_sleep+0x380>)
  40122e:	2200      	movs	r2, #0
  401230:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  401232:	4b17      	ldr	r3, [pc, #92]	; (401290 <pmc_sleep+0x384>)
  401234:	2201      	movs	r2, #1
  401236:	701a      	strb	r2, [r3, #0]
  401238:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40123c:	b662      	cpsie	i

		break;
  40123e:	bf00      	nop
  401240:	e010      	b.n	401264 <pmc_sleep+0x358>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401242:	4a14      	ldr	r2, [pc, #80]	; (401294 <pmc_sleep+0x388>)
  401244:	4b13      	ldr	r3, [pc, #76]	; (401294 <pmc_sleep+0x388>)
  401246:	691b      	ldr	r3, [r3, #16]
  401248:	f043 0304 	orr.w	r3, r3, #4
  40124c:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40124e:	4b12      	ldr	r3, [pc, #72]	; (401298 <pmc_sleep+0x38c>)
  401250:	4a12      	ldr	r2, [pc, #72]	; (40129c <pmc_sleep+0x390>)
  401252:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401254:	4b0e      	ldr	r3, [pc, #56]	; (401290 <pmc_sleep+0x384>)
  401256:	2201      	movs	r2, #1
  401258:	701a      	strb	r2, [r3, #0]
  40125a:	f3bf 8f5f 	dmb	sy
  40125e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401260:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  401262:	bf00      	nop
#endif
	}
}
  401264:	bf00      	nop
  401266:	3764      	adds	r7, #100	; 0x64
  401268:	46bd      	mov	sp, r7
  40126a:	bd90      	pop	{r4, r7, pc}
  40126c:	400e0600 	.word	0x400e0600
  401270:	ffc8fffc 	.word	0xffc8fffc
  401274:	00370001 	.word	0x00370001
  401278:	01370000 	.word	0x01370000
  40127c:	ffc8ff87 	.word	0xffc8ff87
  401280:	07ff0000 	.word	0x07ff0000
  401284:	400e0c00 	.word	0x400e0c00
  401288:	204004d4 	.word	0x204004d4
  40128c:	204004d8 	.word	0x204004d8
  401290:	2040000a 	.word	0x2040000a
  401294:	e000ed00 	.word	0xe000ed00
  401298:	400e1810 	.word	0x400e1810
  40129c:	a5000004 	.word	0xa5000004

004012a0 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  4012a0:	b480      	push	{r7}
  4012a2:	b083      	sub	sp, #12
  4012a4:	af00      	add	r7, sp, #0
  4012a6:	6078      	str	r0, [r7, #4]
  4012a8:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  4012aa:	683b      	ldr	r3, [r7, #0]
  4012ac:	2b00      	cmp	r3, #0
  4012ae:	d006      	beq.n	4012be <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4012b0:	687b      	ldr	r3, [r7, #4]
  4012b2:	685b      	ldr	r3, [r3, #4]
  4012b4:	f043 0201 	orr.w	r2, r3, #1
  4012b8:	687b      	ldr	r3, [r7, #4]
  4012ba:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  4012bc:	e005      	b.n	4012ca <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4012be:	687b      	ldr	r3, [r7, #4]
  4012c0:	685b      	ldr	r3, [r3, #4]
  4012c2:	f023 0201 	bic.w	r2, r3, #1
  4012c6:	687b      	ldr	r3, [r7, #4]
  4012c8:	605a      	str	r2, [r3, #4]
}
  4012ca:	bf00      	nop
  4012cc:	370c      	adds	r7, #12
  4012ce:	46bd      	mov	sp, r7
  4012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d4:	4770      	bx	lr

004012d6 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  4012d6:	b480      	push	{r7}
  4012d8:	b083      	sub	sp, #12
  4012da:	af00      	add	r7, sp, #0
  4012dc:	6078      	str	r0, [r7, #4]
  4012de:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	683a      	ldr	r2, [r7, #0]
  4012e4:	621a      	str	r2, [r3, #32]
}
  4012e6:	bf00      	nop
  4012e8:	370c      	adds	r7, #12
  4012ea:	46bd      	mov	sp, r7
  4012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012f0:	4770      	bx	lr
	...

004012f4 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4012f4:	b480      	push	{r7}
  4012f6:	b087      	sub	sp, #28
  4012f8:	af00      	add	r7, sp, #0
  4012fa:	60f8      	str	r0, [r7, #12]
  4012fc:	60b9      	str	r1, [r7, #8]
  4012fe:	607a      	str	r2, [r7, #4]
  401300:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  401302:	2300      	movs	r3, #0
  401304:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  401306:	68fb      	ldr	r3, [r7, #12]
  401308:	685b      	ldr	r3, [r3, #4]
  40130a:	f003 0301 	and.w	r3, r3, #1
  40130e:	2b01      	cmp	r3, #1
  401310:	d109      	bne.n	401326 <rtc_set_time+0x32>
		if (ul_hour > 12) {
  401312:	68bb      	ldr	r3, [r7, #8]
  401314:	2b0c      	cmp	r3, #12
  401316:	d906      	bls.n	401326 <rtc_set_time+0x32>
			ul_hour -= 12;
  401318:	68bb      	ldr	r3, [r7, #8]
  40131a:	3b0c      	subs	r3, #12
  40131c:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  40131e:	697b      	ldr	r3, [r7, #20]
  401320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  401324:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  401326:	68bb      	ldr	r3, [r7, #8]
  401328:	4a33      	ldr	r2, [pc, #204]	; (4013f8 <rtc_set_time+0x104>)
  40132a:	fba2 2303 	umull	r2, r3, r2, r3
  40132e:	08db      	lsrs	r3, r3, #3
  401330:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  401332:	68b9      	ldr	r1, [r7, #8]
  401334:	4b30      	ldr	r3, [pc, #192]	; (4013f8 <rtc_set_time+0x104>)
  401336:	fba3 2301 	umull	r2, r3, r3, r1
  40133a:	08da      	lsrs	r2, r3, #3
  40133c:	4613      	mov	r3, r2
  40133e:	009b      	lsls	r3, r3, #2
  401340:	4413      	add	r3, r2
  401342:	005b      	lsls	r3, r3, #1
  401344:	1aca      	subs	r2, r1, r3
  401346:	0413      	lsls	r3, r2, #16
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  401348:	4303      	orrs	r3, r0
  40134a:	697a      	ldr	r2, [r7, #20]
  40134c:	4313      	orrs	r3, r2
  40134e:	617b      	str	r3, [r7, #20]

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  401350:	687b      	ldr	r3, [r7, #4]
  401352:	4a29      	ldr	r2, [pc, #164]	; (4013f8 <rtc_set_time+0x104>)
  401354:	fba2 2303 	umull	r2, r3, r2, r3
  401358:	08db      	lsrs	r3, r3, #3
  40135a:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40135c:	6879      	ldr	r1, [r7, #4]
  40135e:	4b26      	ldr	r3, [pc, #152]	; (4013f8 <rtc_set_time+0x104>)
  401360:	fba3 2301 	umull	r2, r3, r3, r1
  401364:	08da      	lsrs	r2, r3, #3
  401366:	4613      	mov	r3, r2
  401368:	009b      	lsls	r3, r3, #2
  40136a:	4413      	add	r3, r2
  40136c:	005b      	lsls	r3, r3, #1
  40136e:	1aca      	subs	r2, r1, r3
  401370:	0213      	lsls	r3, r2, #8
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  401372:	4303      	orrs	r3, r0
  401374:	697a      	ldr	r2, [r7, #20]
  401376:	4313      	orrs	r3, r2
  401378:	617b      	str	r3, [r7, #20]

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40137a:	683b      	ldr	r3, [r7, #0]
  40137c:	4a1e      	ldr	r2, [pc, #120]	; (4013f8 <rtc_set_time+0x104>)
  40137e:	fba2 2303 	umull	r2, r3, r2, r3
  401382:	08db      	lsrs	r3, r3, #3
  401384:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  401386:	6839      	ldr	r1, [r7, #0]
  401388:	4b1b      	ldr	r3, [pc, #108]	; (4013f8 <rtc_set_time+0x104>)
  40138a:	fba3 2301 	umull	r2, r3, r3, r1
  40138e:	08da      	lsrs	r2, r3, #3
  401390:	4613      	mov	r3, r2
  401392:	009b      	lsls	r3, r3, #2
  401394:	4413      	add	r3, r2
  401396:	005b      	lsls	r3, r3, #1
  401398:	1aca      	subs	r2, r1, r3
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40139a:	ea40 0302 	orr.w	r3, r0, r2
  40139e:	697a      	ldr	r2, [r7, #20]
  4013a0:	4313      	orrs	r3, r2
  4013a2:	617b      	str	r3, [r7, #20]

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4013a4:	68fb      	ldr	r3, [r7, #12]
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	f043 0201 	orr.w	r2, r3, #1
  4013ac:	68fb      	ldr	r3, [r7, #12]
  4013ae:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4013b0:	bf00      	nop
  4013b2:	68fb      	ldr	r3, [r7, #12]
  4013b4:	699b      	ldr	r3, [r3, #24]
  4013b6:	f003 0301 	and.w	r3, r3, #1
  4013ba:	2b01      	cmp	r3, #1
  4013bc:	d1f9      	bne.n	4013b2 <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4013be:	68fb      	ldr	r3, [r7, #12]
  4013c0:	2201      	movs	r2, #1
  4013c2:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  4013c4:	68fb      	ldr	r3, [r7, #12]
  4013c6:	697a      	ldr	r2, [r7, #20]
  4013c8:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4013ca:	68fb      	ldr	r3, [r7, #12]
  4013cc:	681b      	ldr	r3, [r3, #0]
  4013ce:	f023 0201 	bic.w	r2, r3, #1
  4013d2:	68fb      	ldr	r3, [r7, #12]
  4013d4:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  4013d6:	68fb      	ldr	r3, [r7, #12]
  4013d8:	69db      	ldr	r3, [r3, #28]
  4013da:	f043 0204 	orr.w	r2, r3, #4
  4013de:	68fb      	ldr	r3, [r7, #12]
  4013e0:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4013e2:	68fb      	ldr	r3, [r7, #12]
  4013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4013e6:	f003 0301 	and.w	r3, r3, #1
}
  4013ea:	4618      	mov	r0, r3
  4013ec:	371c      	adds	r7, #28
  4013ee:	46bd      	mov	sp, r7
  4013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013f4:	4770      	bx	lr
  4013f6:	bf00      	nop
  4013f8:	cccccccd 	.word	0xcccccccd

004013fc <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4013fc:	b480      	push	{r7}
  4013fe:	b087      	sub	sp, #28
  401400:	af00      	add	r7, sp, #0
  401402:	60f8      	str	r0, [r7, #12]
  401404:	60b9      	str	r1, [r7, #8]
  401406:	607a      	str	r2, [r7, #4]
  401408:	603b      	str	r3, [r7, #0]
	uint32_t ul_alarm = 0;
  40140a:	2300      	movs	r3, #0
  40140c:	617b      	str	r3, [r7, #20]

	/* Hour alarm setting */
	if (ul_hour_flag) {
  40140e:	68bb      	ldr	r3, [r7, #8]
  401410:	2b00      	cmp	r3, #0
  401412:	d024      	beq.n	40145e <rtc_set_time_alarm+0x62>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  401414:	68fb      	ldr	r3, [r7, #12]
  401416:	685b      	ldr	r3, [r3, #4]
  401418:	f003 0301 	and.w	r3, r3, #1
  40141c:	2b01      	cmp	r3, #1
  40141e:	d109      	bne.n	401434 <rtc_set_time_alarm+0x38>
			if (ul_hour > 12) {
  401420:	687b      	ldr	r3, [r7, #4]
  401422:	2b0c      	cmp	r3, #12
  401424:	d906      	bls.n	401434 <rtc_set_time_alarm+0x38>
				ul_hour -= 12;
  401426:	687b      	ldr	r3, [r7, #4]
  401428:	3b0c      	subs	r3, #12
  40142a:	607b      	str	r3, [r7, #4]
				ul_alarm |= RTC_TIMR_AMPM;
  40142c:	697b      	ldr	r3, [r7, #20]
  40142e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  401432:	617b      	str	r3, [r7, #20]
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  401434:	687b      	ldr	r3, [r7, #4]
  401436:	4a2e      	ldr	r2, [pc, #184]	; (4014f0 <rtc_set_time_alarm+0xf4>)
  401438:	fba2 2303 	umull	r2, r3, r2, r3
  40143c:	08db      	lsrs	r3, r3, #3
  40143e:	0518      	lsls	r0, r3, #20
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  401440:	6879      	ldr	r1, [r7, #4]
  401442:	4b2b      	ldr	r3, [pc, #172]	; (4014f0 <rtc_set_time_alarm+0xf4>)
  401444:	fba3 2301 	umull	r2, r3, r3, r1
  401448:	08da      	lsrs	r2, r3, #3
  40144a:	4613      	mov	r3, r2
  40144c:	009b      	lsls	r3, r3, #2
  40144e:	4413      	add	r3, r2
  401450:	005b      	lsls	r3, r3, #1
  401452:	1aca      	subs	r2, r1, r3
  401454:	0413      	lsls	r3, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  401456:	4303      	orrs	r3, r0
  401458:	697a      	ldr	r2, [r7, #20]
  40145a:	4313      	orrs	r3, r2
  40145c:	617b      	str	r3, [r7, #20]
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  40145e:	683b      	ldr	r3, [r7, #0]
  401460:	2b00      	cmp	r3, #0
  401462:	d014      	beq.n	40148e <rtc_set_time_alarm+0x92>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  401464:	6a3b      	ldr	r3, [r7, #32]
  401466:	4a22      	ldr	r2, [pc, #136]	; (4014f0 <rtc_set_time_alarm+0xf4>)
  401468:	fba2 2303 	umull	r2, r3, r2, r3
  40146c:	08db      	lsrs	r3, r3, #3
  40146e:	0318      	lsls	r0, r3, #12
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  401470:	6a39      	ldr	r1, [r7, #32]
  401472:	4b1f      	ldr	r3, [pc, #124]	; (4014f0 <rtc_set_time_alarm+0xf4>)
  401474:	fba3 2301 	umull	r2, r3, r3, r1
  401478:	08da      	lsrs	r2, r3, #3
  40147a:	4613      	mov	r3, r2
  40147c:	009b      	lsls	r3, r3, #2
  40147e:	4413      	add	r3, r2
  401480:	005b      	lsls	r3, r3, #1
  401482:	1aca      	subs	r2, r1, r3
  401484:	0213      	lsls	r3, r2, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  401486:	4303      	orrs	r3, r0
  401488:	697a      	ldr	r2, [r7, #20]
  40148a:	4313      	orrs	r3, r2
  40148c:	617b      	str	r3, [r7, #20]
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  40148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401490:	2b00      	cmp	r3, #0
  401492:	d014      	beq.n	4014be <rtc_set_time_alarm+0xc2>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  401494:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401496:	4a16      	ldr	r2, [pc, #88]	; (4014f0 <rtc_set_time_alarm+0xf4>)
  401498:	fba2 2303 	umull	r2, r3, r2, r3
  40149c:	08db      	lsrs	r3, r3, #3
  40149e:	0118      	lsls	r0, r3, #4
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4014a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  4014a2:	4b13      	ldr	r3, [pc, #76]	; (4014f0 <rtc_set_time_alarm+0xf4>)
  4014a4:	fba3 2301 	umull	r2, r3, r3, r1
  4014a8:	08da      	lsrs	r2, r3, #3
  4014aa:	4613      	mov	r3, r2
  4014ac:	009b      	lsls	r3, r3, #2
  4014ae:	4413      	add	r3, r2
  4014b0:	005b      	lsls	r3, r3, #1
  4014b2:	1aca      	subs	r2, r1, r3
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4014b4:	ea40 0302 	orr.w	r3, r0, r2
  4014b8:	697a      	ldr	r2, [r7, #20]
  4014ba:	4313      	orrs	r3, r2
  4014bc:	617b      	str	r3, [r7, #20]
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4014be:	68fb      	ldr	r3, [r7, #12]
  4014c0:	691a      	ldr	r2, [r3, #16]
  4014c2:	4b0c      	ldr	r3, [pc, #48]	; (4014f4 <rtc_set_time_alarm+0xf8>)
  4014c4:	4013      	ands	r3, r2
  4014c6:	68fa      	ldr	r2, [r7, #12]
  4014c8:	6113      	str	r3, [r2, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  4014ca:	68fb      	ldr	r3, [r7, #12]
  4014cc:	697a      	ldr	r2, [r7, #20]
  4014ce:	611a      	str	r2, [r3, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4014d0:	68fb      	ldr	r3, [r7, #12]
  4014d2:	691a      	ldr	r2, [r3, #16]
  4014d4:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <rtc_set_time_alarm+0xfc>)
  4014d6:	4313      	orrs	r3, r2
  4014d8:	68fa      	ldr	r2, [r7, #12]
  4014da:	6113      	str	r3, [r2, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  4014dc:	68fb      	ldr	r3, [r7, #12]
  4014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4014e0:	f003 0304 	and.w	r3, r3, #4
}
  4014e4:	4618      	mov	r0, r3
  4014e6:	371c      	adds	r7, #28
  4014e8:	46bd      	mov	sp, r7
  4014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014ee:	4770      	bx	lr
  4014f0:	cccccccd 	.word	0xcccccccd
  4014f4:	ff7f7f7f 	.word	0xff7f7f7f
  4014f8:	00808080 	.word	0x00808080

004014fc <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4014fc:	b480      	push	{r7}
  4014fe:	b087      	sub	sp, #28
  401500:	af00      	add	r7, sp, #0
  401502:	60f8      	str	r0, [r7, #12]
  401504:	60b9      	str	r1, [r7, #8]
  401506:	607a      	str	r2, [r7, #4]
  401508:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  40150a:	2300      	movs	r3, #0
  40150c:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	4a46      	ldr	r2, [pc, #280]	; (40162c <rtc_set_date+0x130>)
  401512:	fba2 2303 	umull	r2, r3, r2, r3
  401516:	099b      	lsrs	r3, r3, #6
  401518:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40151a:	68bb      	ldr	r3, [r7, #8]
  40151c:	4a44      	ldr	r2, [pc, #272]	; (401630 <rtc_set_date+0x134>)
  40151e:	fba2 2303 	umull	r2, r3, r2, r3
  401522:	0959      	lsrs	r1, r3, #5
  401524:	4b43      	ldr	r3, [pc, #268]	; (401634 <rtc_set_date+0x138>)
  401526:	fba3 2301 	umull	r2, r3, r3, r1
  40152a:	08da      	lsrs	r2, r3, #3
  40152c:	4613      	mov	r3, r2
  40152e:	009b      	lsls	r3, r3, #2
  401530:	4413      	add	r3, r2
  401532:	005b      	lsls	r3, r3, #1
  401534:	1aca      	subs	r2, r1, r3
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  401536:	ea40 0302 	orr.w	r3, r0, r2
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40153a:	697a      	ldr	r2, [r7, #20]
  40153c:	4313      	orrs	r3, r2
  40153e:	617b      	str	r3, [r7, #20]

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  401540:	68bb      	ldr	r3, [r7, #8]
  401542:	4a3c      	ldr	r2, [pc, #240]	; (401634 <rtc_set_date+0x138>)
  401544:	fba2 2303 	umull	r2, r3, r2, r3
  401548:	08d9      	lsrs	r1, r3, #3
  40154a:	4b3a      	ldr	r3, [pc, #232]	; (401634 <rtc_set_date+0x138>)
  40154c:	fba3 2301 	umull	r2, r3, r3, r1
  401550:	08da      	lsrs	r2, r3, #3
  401552:	4613      	mov	r3, r2
  401554:	009b      	lsls	r3, r3, #2
  401556:	4413      	add	r3, r2
  401558:	005b      	lsls	r3, r3, #1
  40155a:	1aca      	subs	r2, r1, r3
  40155c:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40155e:	68b9      	ldr	r1, [r7, #8]
  401560:	4b34      	ldr	r3, [pc, #208]	; (401634 <rtc_set_date+0x138>)
  401562:	fba3 2301 	umull	r2, r3, r3, r1
  401566:	08da      	lsrs	r2, r3, #3
  401568:	4613      	mov	r3, r2
  40156a:	009b      	lsls	r3, r3, #2
  40156c:	4413      	add	r3, r2
  40156e:	005b      	lsls	r3, r3, #1
  401570:	1aca      	subs	r2, r1, r3
  401572:	0213      	lsls	r3, r2, #8
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  401574:	4303      	orrs	r3, r0
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  401576:	697a      	ldr	r2, [r7, #20]
  401578:	4313      	orrs	r3, r2
  40157a:	617b      	str	r3, [r7, #20]

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40157c:	687b      	ldr	r3, [r7, #4]
  40157e:	4a2d      	ldr	r2, [pc, #180]	; (401634 <rtc_set_date+0x138>)
  401580:	fba2 2303 	umull	r2, r3, r2, r3
  401584:	08db      	lsrs	r3, r3, #3
  401586:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  401588:	6879      	ldr	r1, [r7, #4]
  40158a:	4b2a      	ldr	r3, [pc, #168]	; (401634 <rtc_set_date+0x138>)
  40158c:	fba3 2301 	umull	r2, r3, r3, r1
  401590:	08da      	lsrs	r2, r3, #3
  401592:	4613      	mov	r3, r2
  401594:	009b      	lsls	r3, r3, #2
  401596:	4413      	add	r3, r2
  401598:	005b      	lsls	r3, r3, #1
  40159a:	1aca      	subs	r2, r1, r3
  40159c:	0413      	lsls	r3, r2, #16
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40159e:	4303      	orrs	r3, r0
  4015a0:	697a      	ldr	r2, [r7, #20]
  4015a2:	4313      	orrs	r3, r2
  4015a4:	617b      	str	r3, [r7, #20]

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4015a6:	6a3b      	ldr	r3, [r7, #32]
  4015a8:	055b      	lsls	r3, r3, #21
  4015aa:	697a      	ldr	r2, [r7, #20]
  4015ac:	4313      	orrs	r3, r2
  4015ae:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4015b0:	683b      	ldr	r3, [r7, #0]
  4015b2:	4a20      	ldr	r2, [pc, #128]	; (401634 <rtc_set_date+0x138>)
  4015b4:	fba2 2303 	umull	r2, r3, r2, r3
  4015b8:	08db      	lsrs	r3, r3, #3
  4015ba:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4015bc:	6839      	ldr	r1, [r7, #0]
  4015be:	4b1d      	ldr	r3, [pc, #116]	; (401634 <rtc_set_date+0x138>)
  4015c0:	fba3 2301 	umull	r2, r3, r3, r1
  4015c4:	08da      	lsrs	r2, r3, #3
  4015c6:	4613      	mov	r3, r2
  4015c8:	009b      	lsls	r3, r3, #2
  4015ca:	4413      	add	r3, r2
  4015cc:	005b      	lsls	r3, r3, #1
  4015ce:	1aca      	subs	r2, r1, r3
  4015d0:	0613      	lsls	r3, r2, #24
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4015d2:	4303      	orrs	r3, r0
  4015d4:	697a      	ldr	r2, [r7, #20]
  4015d6:	4313      	orrs	r3, r2
  4015d8:	617b      	str	r3, [r7, #20]

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4015da:	68fb      	ldr	r3, [r7, #12]
  4015dc:	681b      	ldr	r3, [r3, #0]
  4015de:	f043 0202 	orr.w	r2, r3, #2
  4015e2:	68fb      	ldr	r3, [r7, #12]
  4015e4:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4015e6:	bf00      	nop
  4015e8:	68fb      	ldr	r3, [r7, #12]
  4015ea:	699b      	ldr	r3, [r3, #24]
  4015ec:	f003 0301 	and.w	r3, r3, #1
  4015f0:	2b01      	cmp	r3, #1
  4015f2:	d1f9      	bne.n	4015e8 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4015f4:	68fb      	ldr	r3, [r7, #12]
  4015f6:	2201      	movs	r2, #1
  4015f8:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  4015fa:	68fb      	ldr	r3, [r7, #12]
  4015fc:	697a      	ldr	r2, [r7, #20]
  4015fe:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  401600:	68fb      	ldr	r3, [r7, #12]
  401602:	681b      	ldr	r3, [r3, #0]
  401604:	f023 0202 	bic.w	r2, r3, #2
  401608:	68fb      	ldr	r3, [r7, #12]
  40160a:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40160c:	68fb      	ldr	r3, [r7, #12]
  40160e:	69db      	ldr	r3, [r3, #28]
  401610:	f043 0204 	orr.w	r2, r3, #4
  401614:	68fb      	ldr	r3, [r7, #12]
  401616:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  401618:	68fb      	ldr	r3, [r7, #12]
  40161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40161c:	f003 0302 	and.w	r3, r3, #2
}
  401620:	4618      	mov	r0, r3
  401622:	371c      	adds	r7, #28
  401624:	46bd      	mov	sp, r7
  401626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162a:	4770      	bx	lr
  40162c:	10624dd3 	.word	0x10624dd3
  401630:	51eb851f 	.word	0x51eb851f
  401634:	cccccccd 	.word	0xcccccccd

00401638 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  401638:	b480      	push	{r7}
  40163a:	b087      	sub	sp, #28
  40163c:	af00      	add	r7, sp, #0
  40163e:	60f8      	str	r0, [r7, #12]
  401640:	60b9      	str	r1, [r7, #8]
  401642:	607a      	str	r2, [r7, #4]
  401644:	603b      	str	r3, [r7, #0]
	uint32_t ul_alarm = 0;
  401646:	2300      	movs	r3, #0
  401648:	617b      	str	r3, [r7, #20]

	/* Month alarm setting */
	if (ul_month_flag) {
  40164a:	68bb      	ldr	r3, [r7, #8]
  40164c:	2b00      	cmp	r3, #0
  40164e:	d014      	beq.n	40167a <rtc_set_date_alarm+0x42>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	4a22      	ldr	r2, [pc, #136]	; (4016dc <rtc_set_date_alarm+0xa4>)
  401654:	fba2 2303 	umull	r2, r3, r2, r3
  401658:	08db      	lsrs	r3, r3, #3
  40165a:	0518      	lsls	r0, r3, #20
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40165c:	6879      	ldr	r1, [r7, #4]
  40165e:	4b1f      	ldr	r3, [pc, #124]	; (4016dc <rtc_set_date_alarm+0xa4>)
  401660:	fba3 2301 	umull	r2, r3, r3, r1
  401664:	08da      	lsrs	r2, r3, #3
  401666:	4613      	mov	r3, r2
  401668:	009b      	lsls	r3, r3, #2
  40166a:	4413      	add	r3, r2
  40166c:	005b      	lsls	r3, r3, #1
  40166e:	1aca      	subs	r2, r1, r3
  401670:	0413      	lsls	r3, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  401672:	4303      	orrs	r3, r0
  401674:	697a      	ldr	r2, [r7, #20]
  401676:	4313      	orrs	r3, r2
  401678:	617b      	str	r3, [r7, #20]
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40167a:	683b      	ldr	r3, [r7, #0]
  40167c:	2b00      	cmp	r3, #0
  40167e:	d014      	beq.n	4016aa <rtc_set_date_alarm+0x72>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401680:	6a3b      	ldr	r3, [r7, #32]
  401682:	4a16      	ldr	r2, [pc, #88]	; (4016dc <rtc_set_date_alarm+0xa4>)
  401684:	fba2 2303 	umull	r2, r3, r2, r3
  401688:	08db      	lsrs	r3, r3, #3
  40168a:	0718      	lsls	r0, r3, #28
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40168c:	6a39      	ldr	r1, [r7, #32]
  40168e:	4b13      	ldr	r3, [pc, #76]	; (4016dc <rtc_set_date_alarm+0xa4>)
  401690:	fba3 2301 	umull	r2, r3, r3, r1
  401694:	08da      	lsrs	r2, r3, #3
  401696:	4613      	mov	r3, r2
  401698:	009b      	lsls	r3, r3, #2
  40169a:	4413      	add	r3, r2
  40169c:	005b      	lsls	r3, r3, #1
  40169e:	1aca      	subs	r2, r1, r3
  4016a0:	0613      	lsls	r3, r2, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4016a2:	4303      	orrs	r3, r0
  4016a4:	697a      	ldr	r2, [r7, #20]
  4016a6:	4313      	orrs	r3, r2
  4016a8:	617b      	str	r3, [r7, #20]
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4016aa:	68fb      	ldr	r3, [r7, #12]
  4016ac:	695a      	ldr	r2, [r3, #20]
  4016ae:	4b0c      	ldr	r3, [pc, #48]	; (4016e0 <rtc_set_date_alarm+0xa8>)
  4016b0:	4013      	ands	r3, r2
  4016b2:	68fa      	ldr	r2, [r7, #12]
  4016b4:	6153      	str	r3, [r2, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4016b6:	68fb      	ldr	r3, [r7, #12]
  4016b8:	697a      	ldr	r2, [r7, #20]
  4016ba:	615a      	str	r2, [r3, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4016bc:	68fb      	ldr	r3, [r7, #12]
  4016be:	695a      	ldr	r2, [r3, #20]
  4016c0:	4b08      	ldr	r3, [pc, #32]	; (4016e4 <rtc_set_date_alarm+0xac>)
  4016c2:	4313      	orrs	r3, r2
  4016c4:	68fa      	ldr	r2, [r7, #12]
  4016c6:	6153      	str	r3, [r2, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4016c8:	68fb      	ldr	r3, [r7, #12]
  4016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016cc:	f003 0308 	and.w	r3, r3, #8
}
  4016d0:	4618      	mov	r0, r3
  4016d2:	371c      	adds	r7, #28
  4016d4:	46bd      	mov	sp, r7
  4016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016da:	4770      	bx	lr
  4016dc:	cccccccd 	.word	0xcccccccd
  4016e0:	7f7fffff 	.word	0x7f7fffff
  4016e4:	80800000 	.word	0x80800000

004016e8 <rtc_get_status>:
 * \param p_rtc Pointer to an RTC instance.
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
  4016e8:	b480      	push	{r7}
  4016ea:	b083      	sub	sp, #12
  4016ec:	af00      	add	r7, sp, #0
  4016ee:	6078      	str	r0, [r7, #4]
	return (p_rtc->RTC_SR);
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	699b      	ldr	r3, [r3, #24]
}
  4016f4:	4618      	mov	r0, r3
  4016f6:	370c      	adds	r7, #12
  4016f8:	46bd      	mov	sp, r7
  4016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016fe:	4770      	bx	lr

00401700 <rtc_clear_status>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
  401700:	b480      	push	{r7}
  401702:	b083      	sub	sp, #12
  401704:	af00      	add	r7, sp, #0
  401706:	6078      	str	r0, [r7, #4]
  401708:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_SCCR = ul_clear;
  40170a:	687b      	ldr	r3, [r7, #4]
  40170c:	683a      	ldr	r2, [r7, #0]
  40170e:	61da      	str	r2, [r3, #28]
}
  401710:	bf00      	nop
  401712:	370c      	adds	r7, #12
  401714:	46bd      	mov	sp, r7
  401716:	f85d 7b04 	ldr.w	r7, [sp], #4
  40171a:	4770      	bx	lr

0040171c <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  40171c:	b480      	push	{r7}
  40171e:	b083      	sub	sp, #12
  401720:	af00      	add	r7, sp, #0
  401722:	6078      	str	r0, [r7, #4]
  401724:	460b      	mov	r3, r1
  401726:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  401728:	887a      	ldrh	r2, [r7, #2]
  40172a:	4b07      	ldr	r3, [pc, #28]	; (401748 <rtt_init+0x2c>)
  40172c:	681b      	ldr	r3, [r3, #0]
  40172e:	4313      	orrs	r3, r2
  401730:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  401734:	687b      	ldr	r3, [r7, #4]
  401736:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  401738:	2300      	movs	r3, #0
}
  40173a:	4618      	mov	r0, r3
  40173c:	370c      	adds	r7, #12
  40173e:	46bd      	mov	sp, r7
  401740:	f85d 7b04 	ldr.w	r7, [sp], #4
  401744:	4770      	bx	lr
  401746:	bf00      	nop
  401748:	204004dc 	.word	0x204004dc

0040174c <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  40174c:	b480      	push	{r7}
  40174e:	b083      	sub	sp, #12
  401750:	af00      	add	r7, sp, #0
  401752:	6078      	str	r0, [r7, #4]
  401754:	460b      	mov	r3, r1
  401756:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  401758:	78fb      	ldrb	r3, [r7, #3]
  40175a:	2b00      	cmp	r3, #0
  40175c:	d00d      	beq.n	40177a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  40175e:	4b10      	ldr	r3, [pc, #64]	; (4017a0 <rtt_sel_source+0x54>)
  401760:	681b      	ldr	r3, [r3, #0]
  401762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  401766:	4a0e      	ldr	r2, [pc, #56]	; (4017a0 <rtt_sel_source+0x54>)
  401768:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40176a:	687b      	ldr	r3, [r7, #4]
  40176c:	681a      	ldr	r2, [r3, #0]
  40176e:	4b0c      	ldr	r3, [pc, #48]	; (4017a0 <rtt_sel_source+0x54>)
  401770:	681b      	ldr	r3, [r3, #0]
  401772:	431a      	orrs	r2, r3
  401774:	687b      	ldr	r3, [r7, #4]
  401776:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  401778:	e00c      	b.n	401794 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40177a:	4b09      	ldr	r3, [pc, #36]	; (4017a0 <rtt_sel_source+0x54>)
  40177c:	681b      	ldr	r3, [r3, #0]
  40177e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  401782:	4a07      	ldr	r2, [pc, #28]	; (4017a0 <rtt_sel_source+0x54>)
  401784:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  401786:	687b      	ldr	r3, [r7, #4]
  401788:	681a      	ldr	r2, [r3, #0]
  40178a:	4b05      	ldr	r3, [pc, #20]	; (4017a0 <rtt_sel_source+0x54>)
  40178c:	681b      	ldr	r3, [r3, #0]
  40178e:	431a      	orrs	r2, r3
  401790:	687b      	ldr	r3, [r7, #4]
  401792:	601a      	str	r2, [r3, #0]
}
  401794:	bf00      	nop
  401796:	370c      	adds	r7, #12
  401798:	46bd      	mov	sp, r7
  40179a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40179e:	4770      	bx	lr
  4017a0:	204004dc 	.word	0x204004dc

004017a4 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  4017a4:	b480      	push	{r7}
  4017a6:	b085      	sub	sp, #20
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	6078      	str	r0, [r7, #4]
  4017ac:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4017ae:	687b      	ldr	r3, [r7, #4]
  4017b0:	681b      	ldr	r3, [r3, #0]
  4017b2:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  4017b4:	68fa      	ldr	r2, [r7, #12]
  4017b6:	683b      	ldr	r3, [r7, #0]
  4017b8:	4313      	orrs	r3, r2
  4017ba:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4017bc:	4b06      	ldr	r3, [pc, #24]	; (4017d8 <rtt_enable_interrupt+0x34>)
  4017be:	681b      	ldr	r3, [r3, #0]
  4017c0:	68fa      	ldr	r2, [r7, #12]
  4017c2:	4313      	orrs	r3, r2
  4017c4:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  4017c6:	687b      	ldr	r3, [r7, #4]
  4017c8:	68fa      	ldr	r2, [r7, #12]
  4017ca:	601a      	str	r2, [r3, #0]
}
  4017cc:	bf00      	nop
  4017ce:	3714      	adds	r7, #20
  4017d0:	46bd      	mov	sp, r7
  4017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017d6:	4770      	bx	lr
  4017d8:	204004dc 	.word	0x204004dc

004017dc <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  4017dc:	b480      	push	{r7}
  4017de:	b085      	sub	sp, #20
  4017e0:	af00      	add	r7, sp, #0
  4017e2:	6078      	str	r0, [r7, #4]
  4017e4:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  4017e6:	2300      	movs	r3, #0
  4017e8:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  4017ea:	687b      	ldr	r3, [r7, #4]
  4017ec:	681b      	ldr	r3, [r3, #0]
  4017ee:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  4017f0:	683b      	ldr	r3, [r7, #0]
  4017f2:	43db      	mvns	r3, r3
  4017f4:	68fa      	ldr	r2, [r7, #12]
  4017f6:	4013      	ands	r3, r2
  4017f8:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4017fa:	4b07      	ldr	r3, [pc, #28]	; (401818 <rtt_disable_interrupt+0x3c>)
  4017fc:	681b      	ldr	r3, [r3, #0]
  4017fe:	68fa      	ldr	r2, [r7, #12]
  401800:	4313      	orrs	r3, r2
  401802:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  401804:	687b      	ldr	r3, [r7, #4]
  401806:	68fa      	ldr	r2, [r7, #12]
  401808:	601a      	str	r2, [r3, #0]
}
  40180a:	bf00      	nop
  40180c:	3714      	adds	r7, #20
  40180e:	46bd      	mov	sp, r7
  401810:	f85d 7b04 	ldr.w	r7, [sp], #4
  401814:	4770      	bx	lr
  401816:	bf00      	nop
  401818:	204004dc 	.word	0x204004dc

0040181c <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  40181c:	b480      	push	{r7}
  40181e:	b085      	sub	sp, #20
  401820:	af00      	add	r7, sp, #0
  401822:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  401824:	687b      	ldr	r3, [r7, #4]
  401826:	689b      	ldr	r3, [r3, #8]
  401828:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  40182a:	e002      	b.n	401832 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  40182c:	687b      	ldr	r3, [r7, #4]
  40182e:	689b      	ldr	r3, [r3, #8]
  401830:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  401832:	687b      	ldr	r3, [r7, #4]
  401834:	689a      	ldr	r2, [r3, #8]
  401836:	68fb      	ldr	r3, [r7, #12]
  401838:	429a      	cmp	r2, r3
  40183a:	d1f7      	bne.n	40182c <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  40183c:	68fb      	ldr	r3, [r7, #12]
}
  40183e:	4618      	mov	r0, r3
  401840:	3714      	adds	r7, #20
  401842:	46bd      	mov	sp, r7
  401844:	f85d 7b04 	ldr.w	r7, [sp], #4
  401848:	4770      	bx	lr

0040184a <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  40184a:	b480      	push	{r7}
  40184c:	b083      	sub	sp, #12
  40184e:	af00      	add	r7, sp, #0
  401850:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  401852:	687b      	ldr	r3, [r7, #4]
  401854:	68db      	ldr	r3, [r3, #12]
}
  401856:	4618      	mov	r0, r3
  401858:	370c      	adds	r7, #12
  40185a:	46bd      	mov	sp, r7
  40185c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401860:	4770      	bx	lr
	...

00401864 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  401864:	b580      	push	{r7, lr}
  401866:	b084      	sub	sp, #16
  401868:	af00      	add	r7, sp, #0
  40186a:	6078      	str	r0, [r7, #4]
  40186c:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40186e:	687b      	ldr	r3, [r7, #4]
  401870:	681b      	ldr	r3, [r3, #0]
  401872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401876:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  401878:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40187c:	480d      	ldr	r0, [pc, #52]	; (4018b4 <rtt_write_alarm_time+0x50>)
  40187e:	4b0e      	ldr	r3, [pc, #56]	; (4018b8 <rtt_write_alarm_time+0x54>)
  401880:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  401882:	683b      	ldr	r3, [r7, #0]
  401884:	2b00      	cmp	r3, #0
  401886:	d104      	bne.n	401892 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  401888:	687b      	ldr	r3, [r7, #4]
  40188a:	f04f 32ff 	mov.w	r2, #4294967295
  40188e:	605a      	str	r2, [r3, #4]
  401890:	e003      	b.n	40189a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  401892:	683b      	ldr	r3, [r7, #0]
  401894:	1e5a      	subs	r2, r3, #1
  401896:	687b      	ldr	r3, [r7, #4]
  401898:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40189a:	68fb      	ldr	r3, [r7, #12]
  40189c:	2b00      	cmp	r3, #0
  40189e:	d004      	beq.n	4018aa <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4018a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4018a4:	4803      	ldr	r0, [pc, #12]	; (4018b4 <rtt_write_alarm_time+0x50>)
  4018a6:	4b05      	ldr	r3, [pc, #20]	; (4018bc <rtt_write_alarm_time+0x58>)
  4018a8:	4798      	blx	r3
	}

	return 0;
  4018aa:	2300      	movs	r3, #0
}
  4018ac:	4618      	mov	r0, r3
  4018ae:	3710      	adds	r7, #16
  4018b0:	46bd      	mov	sp, r7
  4018b2:	bd80      	pop	{r7, pc}
  4018b4:	400e1830 	.word	0x400e1830
  4018b8:	004017dd 	.word	0x004017dd
  4018bc:	004017a5 	.word	0x004017a5

004018c0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4018c0:	b480      	push	{r7}
  4018c2:	b087      	sub	sp, #28
  4018c4:	af00      	add	r7, sp, #0
  4018c6:	60f8      	str	r0, [r7, #12]
  4018c8:	60b9      	str	r1, [r7, #8]
  4018ca:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4018cc:	68fa      	ldr	r2, [r7, #12]
  4018ce:	68bb      	ldr	r3, [r7, #8]
  4018d0:	019b      	lsls	r3, r3, #6
  4018d2:	4413      	add	r3, r2
  4018d4:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4018d6:	697b      	ldr	r3, [r7, #20]
  4018d8:	2202      	movs	r2, #2
  4018da:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4018dc:	697b      	ldr	r3, [r7, #20]
  4018de:	f04f 32ff 	mov.w	r2, #4294967295
  4018e2:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4018e4:	697b      	ldr	r3, [r7, #20]
  4018e6:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4018e8:	697b      	ldr	r3, [r7, #20]
  4018ea:	687a      	ldr	r2, [r7, #4]
  4018ec:	605a      	str	r2, [r3, #4]
}
  4018ee:	bf00      	nop
  4018f0:	371c      	adds	r7, #28
  4018f2:	46bd      	mov	sp, r7
  4018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018f8:	4770      	bx	lr

004018fa <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4018fa:	b480      	push	{r7}
  4018fc:	b083      	sub	sp, #12
  4018fe:	af00      	add	r7, sp, #0
  401900:	6078      	str	r0, [r7, #4]
  401902:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401904:	687a      	ldr	r2, [r7, #4]
  401906:	683b      	ldr	r3, [r7, #0]
  401908:	019b      	lsls	r3, r3, #6
  40190a:	4413      	add	r3, r2
  40190c:	2205      	movs	r2, #5
  40190e:	601a      	str	r2, [r3, #0]
}
  401910:	bf00      	nop
  401912:	370c      	adds	r7, #12
  401914:	46bd      	mov	sp, r7
  401916:	f85d 7b04 	ldr.w	r7, [sp], #4
  40191a:	4770      	bx	lr

0040191c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40191c:	b480      	push	{r7}
  40191e:	b085      	sub	sp, #20
  401920:	af00      	add	r7, sp, #0
  401922:	60f8      	str	r0, [r7, #12]
  401924:	60b9      	str	r1, [r7, #8]
  401926:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401928:	68fa      	ldr	r2, [r7, #12]
  40192a:	68bb      	ldr	r3, [r7, #8]
  40192c:	019b      	lsls	r3, r3, #6
  40192e:	4413      	add	r3, r2
  401930:	331c      	adds	r3, #28
  401932:	687a      	ldr	r2, [r7, #4]
  401934:	601a      	str	r2, [r3, #0]
}
  401936:	bf00      	nop
  401938:	3714      	adds	r7, #20
  40193a:	46bd      	mov	sp, r7
  40193c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401940:	4770      	bx	lr

00401942 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  401942:	b480      	push	{r7}
  401944:	b087      	sub	sp, #28
  401946:	af00      	add	r7, sp, #0
  401948:	60f8      	str	r0, [r7, #12]
  40194a:	60b9      	str	r1, [r7, #8]
  40194c:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40194e:	68fa      	ldr	r2, [r7, #12]
  401950:	68bb      	ldr	r3, [r7, #8]
  401952:	019b      	lsls	r3, r3, #6
  401954:	4413      	add	r3, r2
  401956:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401958:	697b      	ldr	r3, [r7, #20]
  40195a:	687a      	ldr	r2, [r7, #4]
  40195c:	625a      	str	r2, [r3, #36]	; 0x24
}
  40195e:	bf00      	nop
  401960:	371c      	adds	r7, #28
  401962:	46bd      	mov	sp, r7
  401964:	f85d 7b04 	ldr.w	r7, [sp], #4
  401968:	4770      	bx	lr

0040196a <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40196a:	b480      	push	{r7}
  40196c:	b085      	sub	sp, #20
  40196e:	af00      	add	r7, sp, #0
  401970:	6078      	str	r0, [r7, #4]
  401972:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401974:	687a      	ldr	r2, [r7, #4]
  401976:	683b      	ldr	r3, [r7, #0]
  401978:	019b      	lsls	r3, r3, #6
  40197a:	4413      	add	r3, r2
  40197c:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40197e:	68fb      	ldr	r3, [r7, #12]
  401980:	6a1b      	ldr	r3, [r3, #32]
}
  401982:	4618      	mov	r0, r3
  401984:	3714      	adds	r7, #20
  401986:	46bd      	mov	sp, r7
  401988:	f85d 7b04 	ldr.w	r7, [sp], #4
  40198c:	4770      	bx	lr

0040198e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40198e:	b480      	push	{r7}
  401990:	b08d      	sub	sp, #52	; 0x34
  401992:	af00      	add	r7, sp, #0
  401994:	60f8      	str	r0, [r7, #12]
  401996:	60b9      	str	r1, [r7, #8]
  401998:	607a      	str	r2, [r7, #4]
  40199a:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40199c:	2302      	movs	r3, #2
  40199e:	613b      	str	r3, [r7, #16]
  4019a0:	2308      	movs	r3, #8
  4019a2:	617b      	str	r3, [r7, #20]
  4019a4:	2320      	movs	r3, #32
  4019a6:	61bb      	str	r3, [r7, #24]
  4019a8:	2380      	movs	r3, #128	; 0x80
  4019aa:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4019ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4019ae:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4019b0:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4019b2:	2300      	movs	r3, #0
  4019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4019b6:	e01a      	b.n	4019ee <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019ba:	009b      	lsls	r3, r3, #2
  4019bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4019c0:	4413      	add	r3, r2
  4019c2:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4019c6:	68ba      	ldr	r2, [r7, #8]
  4019c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4019cc:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4019d0:	0c1b      	lsrs	r3, r3, #16
  4019d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4019d4:	68fa      	ldr	r2, [r7, #12]
  4019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4019d8:	429a      	cmp	r2, r3
  4019da:	d901      	bls.n	4019e0 <tc_find_mck_divisor+0x52>
			return 0;
  4019dc:	2300      	movs	r3, #0
  4019de:	e023      	b.n	401a28 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4019e0:	68fa      	ldr	r2, [r7, #12]
  4019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019e4:	429a      	cmp	r2, r3
  4019e6:	d206      	bcs.n	4019f6 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019ea:	3301      	adds	r3, #1
  4019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019f0:	2b04      	cmp	r3, #4
  4019f2:	d9e1      	bls.n	4019b8 <tc_find_mck_divisor+0x2a>
  4019f4:	e000      	b.n	4019f8 <tc_find_mck_divisor+0x6a>
			break;
  4019f6:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019fa:	2b04      	cmp	r3, #4
  4019fc:	d901      	bls.n	401a02 <tc_find_mck_divisor+0x74>
		return 0;
  4019fe:	2300      	movs	r3, #0
  401a00:	e012      	b.n	401a28 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	2b00      	cmp	r3, #0
  401a06:	d008      	beq.n	401a1a <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a0a:	009b      	lsls	r3, r3, #2
  401a0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401a10:	4413      	add	r3, r2
  401a12:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401a16:	687b      	ldr	r3, [r7, #4]
  401a18:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401a1a:	683b      	ldr	r3, [r7, #0]
  401a1c:	2b00      	cmp	r3, #0
  401a1e:	d002      	beq.n	401a26 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  401a20:	683b      	ldr	r3, [r7, #0]
  401a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401a24:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401a26:	2301      	movs	r3, #1
}
  401a28:	4618      	mov	r0, r3
  401a2a:	3734      	adds	r7, #52	; 0x34
  401a2c:	46bd      	mov	sp, r7
  401a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a32:	4770      	bx	lr

00401a34 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401a34:	b480      	push	{r7}
  401a36:	b083      	sub	sp, #12
  401a38:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a3a:	f3ef 8310 	mrs	r3, PRIMASK
  401a3e:	607b      	str	r3, [r7, #4]
  return(result);
  401a40:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a42:	2b00      	cmp	r3, #0
  401a44:	bf0c      	ite	eq
  401a46:	2301      	moveq	r3, #1
  401a48:	2300      	movne	r3, #0
  401a4a:	b2db      	uxtb	r3, r3
  401a4c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401a4e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401a50:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401a54:	4b04      	ldr	r3, [pc, #16]	; (401a68 <cpu_irq_save+0x34>)
  401a56:	2200      	movs	r2, #0
  401a58:	701a      	strb	r2, [r3, #0]
	return flags;
  401a5a:	683b      	ldr	r3, [r7, #0]
}
  401a5c:	4618      	mov	r0, r3
  401a5e:	370c      	adds	r7, #12
  401a60:	46bd      	mov	sp, r7
  401a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a66:	4770      	bx	lr
  401a68:	2040000a 	.word	0x2040000a

00401a6c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401a6c:	b480      	push	{r7}
  401a6e:	b083      	sub	sp, #12
  401a70:	af00      	add	r7, sp, #0
  401a72:	6078      	str	r0, [r7, #4]
	return (flags);
  401a74:	687b      	ldr	r3, [r7, #4]
  401a76:	2b00      	cmp	r3, #0
  401a78:	bf14      	ite	ne
  401a7a:	2301      	movne	r3, #1
  401a7c:	2300      	moveq	r3, #0
  401a7e:	b2db      	uxtb	r3, r3
}
  401a80:	4618      	mov	r0, r3
  401a82:	370c      	adds	r7, #12
  401a84:	46bd      	mov	sp, r7
  401a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a8a:	4770      	bx	lr

00401a8c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401a8c:	b580      	push	{r7, lr}
  401a8e:	b082      	sub	sp, #8
  401a90:	af00      	add	r7, sp, #0
  401a92:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401a94:	6878      	ldr	r0, [r7, #4]
  401a96:	4b07      	ldr	r3, [pc, #28]	; (401ab4 <cpu_irq_restore+0x28>)
  401a98:	4798      	blx	r3
  401a9a:	4603      	mov	r3, r0
  401a9c:	2b00      	cmp	r3, #0
  401a9e:	d005      	beq.n	401aac <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401aa0:	4b05      	ldr	r3, [pc, #20]	; (401ab8 <cpu_irq_restore+0x2c>)
  401aa2:	2201      	movs	r2, #1
  401aa4:	701a      	strb	r2, [r3, #0]
  401aa6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401aaa:	b662      	cpsie	i
}
  401aac:	bf00      	nop
  401aae:	3708      	adds	r7, #8
  401ab0:	46bd      	mov	sp, r7
  401ab2:	bd80      	pop	{r7, pc}
  401ab4:	00401a6d 	.word	0x00401a6d
  401ab8:	2040000a 	.word	0x2040000a

00401abc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401abc:	b580      	push	{r7, lr}
  401abe:	b084      	sub	sp, #16
  401ac0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401ac2:	4b1e      	ldr	r3, [pc, #120]	; (401b3c <Reset_Handler+0x80>)
  401ac4:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401ac6:	4b1e      	ldr	r3, [pc, #120]	; (401b40 <Reset_Handler+0x84>)
  401ac8:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401aca:	68fa      	ldr	r2, [r7, #12]
  401acc:	68bb      	ldr	r3, [r7, #8]
  401ace:	429a      	cmp	r2, r3
  401ad0:	d00c      	beq.n	401aec <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401ad2:	e007      	b.n	401ae4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401ad4:	68bb      	ldr	r3, [r7, #8]
  401ad6:	1d1a      	adds	r2, r3, #4
  401ad8:	60ba      	str	r2, [r7, #8]
  401ada:	68fa      	ldr	r2, [r7, #12]
  401adc:	1d11      	adds	r1, r2, #4
  401ade:	60f9      	str	r1, [r7, #12]
  401ae0:	6812      	ldr	r2, [r2, #0]
  401ae2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401ae4:	68bb      	ldr	r3, [r7, #8]
  401ae6:	4a17      	ldr	r2, [pc, #92]	; (401b44 <Reset_Handler+0x88>)
  401ae8:	4293      	cmp	r3, r2
  401aea:	d3f3      	bcc.n	401ad4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401aec:	4b16      	ldr	r3, [pc, #88]	; (401b48 <Reset_Handler+0x8c>)
  401aee:	60bb      	str	r3, [r7, #8]
  401af0:	e004      	b.n	401afc <Reset_Handler+0x40>
                *pDest++ = 0;
  401af2:	68bb      	ldr	r3, [r7, #8]
  401af4:	1d1a      	adds	r2, r3, #4
  401af6:	60ba      	str	r2, [r7, #8]
  401af8:	2200      	movs	r2, #0
  401afa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401afc:	68bb      	ldr	r3, [r7, #8]
  401afe:	4a13      	ldr	r2, [pc, #76]	; (401b4c <Reset_Handler+0x90>)
  401b00:	4293      	cmp	r3, r2
  401b02:	d3f6      	bcc.n	401af2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401b04:	4b12      	ldr	r3, [pc, #72]	; (401b50 <Reset_Handler+0x94>)
  401b06:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b08:	4a12      	ldr	r2, [pc, #72]	; (401b54 <Reset_Handler+0x98>)
  401b0a:	68fb      	ldr	r3, [r7, #12]
  401b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401b10:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401b12:	4b11      	ldr	r3, [pc, #68]	; (401b58 <Reset_Handler+0x9c>)
  401b14:	4798      	blx	r3
  401b16:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401b18:	4a10      	ldr	r2, [pc, #64]	; (401b5c <Reset_Handler+0xa0>)
  401b1a:	4b10      	ldr	r3, [pc, #64]	; (401b5c <Reset_Handler+0xa0>)
  401b1c:	681b      	ldr	r3, [r3, #0]
  401b1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401b22:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b28:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401b2c:	6878      	ldr	r0, [r7, #4]
  401b2e:	4b0c      	ldr	r3, [pc, #48]	; (401b60 <Reset_Handler+0xa4>)
  401b30:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401b32:	4b0c      	ldr	r3, [pc, #48]	; (401b64 <Reset_Handler+0xa8>)
  401b34:	4798      	blx	r3

        /* Branch to main function */
        main();
  401b36:	4b0c      	ldr	r3, [pc, #48]	; (401b68 <Reset_Handler+0xac>)
  401b38:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401b3a:	e7fe      	b.n	401b3a <Reset_Handler+0x7e>
  401b3c:	00402c00 	.word	0x00402c00
  401b40:	20400000 	.word	0x20400000
  401b44:	20400444 	.word	0x20400444
  401b48:	20400444 	.word	0x20400444
  401b4c:	20400508 	.word	0x20400508
  401b50:	00400000 	.word	0x00400000
  401b54:	e000ed00 	.word	0xe000ed00
  401b58:	00401a35 	.word	0x00401a35
  401b5c:	e000ed88 	.word	0xe000ed88
  401b60:	00401a8d 	.word	0x00401a8d
  401b64:	00402a45 	.word	0x00402a45
  401b68:	004025fd 	.word	0x004025fd

00401b6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401b6c:	b480      	push	{r7}
  401b6e:	af00      	add	r7, sp, #0
        while (1) {
  401b70:	e7fe      	b.n	401b70 <Dummy_Handler+0x4>
	...

00401b74 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401b74:	b480      	push	{r7}
  401b76:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401b78:	4b52      	ldr	r3, [pc, #328]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b7c:	f003 0303 	and.w	r3, r3, #3
  401b80:	2b01      	cmp	r3, #1
  401b82:	d014      	beq.n	401bae <SystemCoreClockUpdate+0x3a>
  401b84:	2b01      	cmp	r3, #1
  401b86:	d302      	bcc.n	401b8e <SystemCoreClockUpdate+0x1a>
  401b88:	2b02      	cmp	r3, #2
  401b8a:	d038      	beq.n	401bfe <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401b8c:	e07a      	b.n	401c84 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401b8e:	4b4e      	ldr	r3, [pc, #312]	; (401cc8 <SystemCoreClockUpdate+0x154>)
  401b90:	695b      	ldr	r3, [r3, #20]
  401b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401b96:	2b00      	cmp	r3, #0
  401b98:	d004      	beq.n	401ba4 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401b9a:	4b4c      	ldr	r3, [pc, #304]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401b9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ba0:	601a      	str	r2, [r3, #0]
    break;
  401ba2:	e06f      	b.n	401c84 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401ba4:	4b49      	ldr	r3, [pc, #292]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401ba6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401baa:	601a      	str	r2, [r3, #0]
    break;
  401bac:	e06a      	b.n	401c84 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401bae:	4b45      	ldr	r3, [pc, #276]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401bb0:	6a1b      	ldr	r3, [r3, #32]
  401bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	d003      	beq.n	401bc2 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401bba:	4b44      	ldr	r3, [pc, #272]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401bbc:	4a44      	ldr	r2, [pc, #272]	; (401cd0 <SystemCoreClockUpdate+0x15c>)
  401bbe:	601a      	str	r2, [r3, #0]
    break;
  401bc0:	e060      	b.n	401c84 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401bc2:	4b42      	ldr	r3, [pc, #264]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401bc4:	4a43      	ldr	r2, [pc, #268]	; (401cd4 <SystemCoreClockUpdate+0x160>)
  401bc6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401bc8:	4b3e      	ldr	r3, [pc, #248]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401bca:	6a1b      	ldr	r3, [r3, #32]
  401bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bd0:	2b10      	cmp	r3, #16
  401bd2:	d004      	beq.n	401bde <SystemCoreClockUpdate+0x6a>
  401bd4:	2b20      	cmp	r3, #32
  401bd6:	d008      	beq.n	401bea <SystemCoreClockUpdate+0x76>
  401bd8:	2b00      	cmp	r3, #0
  401bda:	d00e      	beq.n	401bfa <SystemCoreClockUpdate+0x86>
          break;
  401bdc:	e00e      	b.n	401bfc <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401bde:	4b3b      	ldr	r3, [pc, #236]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401be0:	681b      	ldr	r3, [r3, #0]
  401be2:	005b      	lsls	r3, r3, #1
  401be4:	4a39      	ldr	r2, [pc, #228]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401be6:	6013      	str	r3, [r2, #0]
          break;
  401be8:	e008      	b.n	401bfc <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401bea:	4b38      	ldr	r3, [pc, #224]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401bec:	681a      	ldr	r2, [r3, #0]
  401bee:	4613      	mov	r3, r2
  401bf0:	005b      	lsls	r3, r3, #1
  401bf2:	4413      	add	r3, r2
  401bf4:	4a35      	ldr	r2, [pc, #212]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401bf6:	6013      	str	r3, [r2, #0]
          break;
  401bf8:	e000      	b.n	401bfc <SystemCoreClockUpdate+0x88>
          break;
  401bfa:	bf00      	nop
    break;
  401bfc:	e042      	b.n	401c84 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401bfe:	4b31      	ldr	r3, [pc, #196]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401c00:	6a1b      	ldr	r3, [r3, #32]
  401c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c06:	2b00      	cmp	r3, #0
  401c08:	d003      	beq.n	401c12 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c0a:	4b30      	ldr	r3, [pc, #192]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c0c:	4a30      	ldr	r2, [pc, #192]	; (401cd0 <SystemCoreClockUpdate+0x15c>)
  401c0e:	601a      	str	r2, [r3, #0]
  401c10:	e01c      	b.n	401c4c <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c12:	4b2e      	ldr	r3, [pc, #184]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c14:	4a2f      	ldr	r2, [pc, #188]	; (401cd4 <SystemCoreClockUpdate+0x160>)
  401c16:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c18:	4b2a      	ldr	r3, [pc, #168]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401c1a:	6a1b      	ldr	r3, [r3, #32]
  401c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c20:	2b10      	cmp	r3, #16
  401c22:	d004      	beq.n	401c2e <SystemCoreClockUpdate+0xba>
  401c24:	2b20      	cmp	r3, #32
  401c26:	d008      	beq.n	401c3a <SystemCoreClockUpdate+0xc6>
  401c28:	2b00      	cmp	r3, #0
  401c2a:	d00e      	beq.n	401c4a <SystemCoreClockUpdate+0xd6>
          break;
  401c2c:	e00e      	b.n	401c4c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401c2e:	4b27      	ldr	r3, [pc, #156]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c30:	681b      	ldr	r3, [r3, #0]
  401c32:	005b      	lsls	r3, r3, #1
  401c34:	4a25      	ldr	r2, [pc, #148]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c36:	6013      	str	r3, [r2, #0]
          break;
  401c38:	e008      	b.n	401c4c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401c3a:	4b24      	ldr	r3, [pc, #144]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c3c:	681a      	ldr	r2, [r3, #0]
  401c3e:	4613      	mov	r3, r2
  401c40:	005b      	lsls	r3, r3, #1
  401c42:	4413      	add	r3, r2
  401c44:	4a21      	ldr	r2, [pc, #132]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c46:	6013      	str	r3, [r2, #0]
          break;
  401c48:	e000      	b.n	401c4c <SystemCoreClockUpdate+0xd8>
          break;
  401c4a:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401c4c:	4b1d      	ldr	r3, [pc, #116]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c50:	f003 0303 	and.w	r3, r3, #3
  401c54:	2b02      	cmp	r3, #2
  401c56:	d114      	bne.n	401c82 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c58:	4b1a      	ldr	r3, [pc, #104]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401c5c:	0c1b      	lsrs	r3, r3, #16
  401c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401c62:	3301      	adds	r3, #1
  401c64:	4a19      	ldr	r2, [pc, #100]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c66:	6812      	ldr	r2, [r2, #0]
  401c68:	fb02 f303 	mul.w	r3, r2, r3
  401c6c:	4a17      	ldr	r2, [pc, #92]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c6e:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401c70:	4b14      	ldr	r3, [pc, #80]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401c74:	b2db      	uxtb	r3, r3
  401c76:	4a15      	ldr	r2, [pc, #84]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c78:	6812      	ldr	r2, [r2, #0]
  401c7a:	fbb2 f3f3 	udiv	r3, r2, r3
  401c7e:	4a13      	ldr	r2, [pc, #76]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c80:	6013      	str	r3, [r2, #0]
    break;
  401c82:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401c84:	4b0f      	ldr	r3, [pc, #60]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c8c:	2b70      	cmp	r3, #112	; 0x70
  401c8e:	d108      	bne.n	401ca2 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401c90:	4b0e      	ldr	r3, [pc, #56]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c92:	681b      	ldr	r3, [r3, #0]
  401c94:	4a10      	ldr	r2, [pc, #64]	; (401cd8 <SystemCoreClockUpdate+0x164>)
  401c96:	fba2 2303 	umull	r2, r3, r2, r3
  401c9a:	085b      	lsrs	r3, r3, #1
  401c9c:	4a0b      	ldr	r2, [pc, #44]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401c9e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401ca0:	e00a      	b.n	401cb8 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401ca2:	4b08      	ldr	r3, [pc, #32]	; (401cc4 <SystemCoreClockUpdate+0x150>)
  401ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ca6:	091b      	lsrs	r3, r3, #4
  401ca8:	f003 0307 	and.w	r3, r3, #7
  401cac:	4a07      	ldr	r2, [pc, #28]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401cae:	6812      	ldr	r2, [r2, #0]
  401cb0:	fa22 f303 	lsr.w	r3, r2, r3
  401cb4:	4a05      	ldr	r2, [pc, #20]	; (401ccc <SystemCoreClockUpdate+0x158>)
  401cb6:	6013      	str	r3, [r2, #0]
}
  401cb8:	bf00      	nop
  401cba:	46bd      	mov	sp, r7
  401cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cc0:	4770      	bx	lr
  401cc2:	bf00      	nop
  401cc4:	400e0600 	.word	0x400e0600
  401cc8:	400e1810 	.word	0x400e1810
  401ccc:	20400010 	.word	0x20400010
  401cd0:	00b71b00 	.word	0x00b71b00
  401cd4:	003d0900 	.word	0x003d0900
  401cd8:	aaaaaaab 	.word	0xaaaaaaab

00401cdc <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401cdc:	b480      	push	{r7}
  401cde:	b083      	sub	sp, #12
  401ce0:	af00      	add	r7, sp, #0
  401ce2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401ce4:	687b      	ldr	r3, [r7, #4]
  401ce6:	4a19      	ldr	r2, [pc, #100]	; (401d4c <system_init_flash+0x70>)
  401ce8:	4293      	cmp	r3, r2
  401cea:	d804      	bhi.n	401cf6 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401cec:	4b18      	ldr	r3, [pc, #96]	; (401d50 <system_init_flash+0x74>)
  401cee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401cf2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401cf4:	e023      	b.n	401d3e <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401cf6:	687b      	ldr	r3, [r7, #4]
  401cf8:	4a16      	ldr	r2, [pc, #88]	; (401d54 <system_init_flash+0x78>)
  401cfa:	4293      	cmp	r3, r2
  401cfc:	d803      	bhi.n	401d06 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401cfe:	4b14      	ldr	r3, [pc, #80]	; (401d50 <system_init_flash+0x74>)
  401d00:	4a15      	ldr	r2, [pc, #84]	; (401d58 <system_init_flash+0x7c>)
  401d02:	601a      	str	r2, [r3, #0]
}
  401d04:	e01b      	b.n	401d3e <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401d06:	687b      	ldr	r3, [r7, #4]
  401d08:	4a14      	ldr	r2, [pc, #80]	; (401d5c <system_init_flash+0x80>)
  401d0a:	4293      	cmp	r3, r2
  401d0c:	d803      	bhi.n	401d16 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d0e:	4b10      	ldr	r3, [pc, #64]	; (401d50 <system_init_flash+0x74>)
  401d10:	4a13      	ldr	r2, [pc, #76]	; (401d60 <system_init_flash+0x84>)
  401d12:	601a      	str	r2, [r3, #0]
}
  401d14:	e013      	b.n	401d3e <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401d16:	687b      	ldr	r3, [r7, #4]
  401d18:	4a12      	ldr	r2, [pc, #72]	; (401d64 <system_init_flash+0x88>)
  401d1a:	4293      	cmp	r3, r2
  401d1c:	d803      	bhi.n	401d26 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401d1e:	4b0c      	ldr	r3, [pc, #48]	; (401d50 <system_init_flash+0x74>)
  401d20:	4a11      	ldr	r2, [pc, #68]	; (401d68 <system_init_flash+0x8c>)
  401d22:	601a      	str	r2, [r3, #0]
}
  401d24:	e00b      	b.n	401d3e <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401d26:	687b      	ldr	r3, [r7, #4]
  401d28:	4a10      	ldr	r2, [pc, #64]	; (401d6c <system_init_flash+0x90>)
  401d2a:	4293      	cmp	r3, r2
  401d2c:	d804      	bhi.n	401d38 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d2e:	4b08      	ldr	r3, [pc, #32]	; (401d50 <system_init_flash+0x74>)
  401d30:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401d34:	601a      	str	r2, [r3, #0]
}
  401d36:	e002      	b.n	401d3e <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d38:	4b05      	ldr	r3, [pc, #20]	; (401d50 <system_init_flash+0x74>)
  401d3a:	4a0d      	ldr	r2, [pc, #52]	; (401d70 <system_init_flash+0x94>)
  401d3c:	601a      	str	r2, [r3, #0]
}
  401d3e:	bf00      	nop
  401d40:	370c      	adds	r7, #12
  401d42:	46bd      	mov	sp, r7
  401d44:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d48:	4770      	bx	lr
  401d4a:	bf00      	nop
  401d4c:	01312cff 	.word	0x01312cff
  401d50:	400e0c00 	.word	0x400e0c00
  401d54:	026259ff 	.word	0x026259ff
  401d58:	04000100 	.word	0x04000100
  401d5c:	039386ff 	.word	0x039386ff
  401d60:	04000200 	.word	0x04000200
  401d64:	04c4b3ff 	.word	0x04c4b3ff
  401d68:	04000300 	.word	0x04000300
  401d6c:	05f5e0ff 	.word	0x05f5e0ff
  401d70:	04000500 	.word	0x04000500

00401d74 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401d74:	b480      	push	{r7}
  401d76:	b083      	sub	sp, #12
  401d78:	af00      	add	r7, sp, #0
  401d7a:	4603      	mov	r3, r0
  401d7c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d7e:	4909      	ldr	r1, [pc, #36]	; (401da4 <NVIC_EnableIRQ+0x30>)
  401d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d84:	095b      	lsrs	r3, r3, #5
  401d86:	79fa      	ldrb	r2, [r7, #7]
  401d88:	f002 021f 	and.w	r2, r2, #31
  401d8c:	2001      	movs	r0, #1
  401d8e:	fa00 f202 	lsl.w	r2, r0, r2
  401d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401d96:	bf00      	nop
  401d98:	370c      	adds	r7, #12
  401d9a:	46bd      	mov	sp, r7
  401d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401da0:	4770      	bx	lr
  401da2:	bf00      	nop
  401da4:	e000e100 	.word	0xe000e100

00401da8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401da8:	b480      	push	{r7}
  401daa:	b083      	sub	sp, #12
  401dac:	af00      	add	r7, sp, #0
  401dae:	4603      	mov	r3, r0
  401db0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401db2:	4909      	ldr	r1, [pc, #36]	; (401dd8 <NVIC_DisableIRQ+0x30>)
  401db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401db8:	095b      	lsrs	r3, r3, #5
  401dba:	79fa      	ldrb	r2, [r7, #7]
  401dbc:	f002 021f 	and.w	r2, r2, #31
  401dc0:	2001      	movs	r0, #1
  401dc2:	fa00 f202 	lsl.w	r2, r0, r2
  401dc6:	3320      	adds	r3, #32
  401dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401dcc:	bf00      	nop
  401dce:	370c      	adds	r7, #12
  401dd0:	46bd      	mov	sp, r7
  401dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dd6:	4770      	bx	lr
  401dd8:	e000e100 	.word	0xe000e100

00401ddc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401ddc:	b480      	push	{r7}
  401dde:	b083      	sub	sp, #12
  401de0:	af00      	add	r7, sp, #0
  401de2:	4603      	mov	r3, r0
  401de4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401de6:	4909      	ldr	r1, [pc, #36]	; (401e0c <NVIC_ClearPendingIRQ+0x30>)
  401de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401dec:	095b      	lsrs	r3, r3, #5
  401dee:	79fa      	ldrb	r2, [r7, #7]
  401df0:	f002 021f 	and.w	r2, r2, #31
  401df4:	2001      	movs	r0, #1
  401df6:	fa00 f202 	lsl.w	r2, r0, r2
  401dfa:	3360      	adds	r3, #96	; 0x60
  401dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401e00:	bf00      	nop
  401e02:	370c      	adds	r7, #12
  401e04:	46bd      	mov	sp, r7
  401e06:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e0a:	4770      	bx	lr
  401e0c:	e000e100 	.word	0xe000e100

00401e10 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401e10:	b480      	push	{r7}
  401e12:	b083      	sub	sp, #12
  401e14:	af00      	add	r7, sp, #0
  401e16:	4603      	mov	r3, r0
  401e18:	6039      	str	r1, [r7, #0]
  401e1a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e20:	2b00      	cmp	r3, #0
  401e22:	da0b      	bge.n	401e3c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401e24:	490d      	ldr	r1, [pc, #52]	; (401e5c <NVIC_SetPriority+0x4c>)
  401e26:	79fb      	ldrb	r3, [r7, #7]
  401e28:	f003 030f 	and.w	r3, r3, #15
  401e2c:	3b04      	subs	r3, #4
  401e2e:	683a      	ldr	r2, [r7, #0]
  401e30:	b2d2      	uxtb	r2, r2
  401e32:	0152      	lsls	r2, r2, #5
  401e34:	b2d2      	uxtb	r2, r2
  401e36:	440b      	add	r3, r1
  401e38:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401e3a:	e009      	b.n	401e50 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401e3c:	4908      	ldr	r1, [pc, #32]	; (401e60 <NVIC_SetPriority+0x50>)
  401e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e42:	683a      	ldr	r2, [r7, #0]
  401e44:	b2d2      	uxtb	r2, r2
  401e46:	0152      	lsls	r2, r2, #5
  401e48:	b2d2      	uxtb	r2, r2
  401e4a:	440b      	add	r3, r1
  401e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401e50:	bf00      	nop
  401e52:	370c      	adds	r7, #12
  401e54:	46bd      	mov	sp, r7
  401e56:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e5a:	4770      	bx	lr
  401e5c:	e000ed00 	.word	0xe000ed00
  401e60:	e000e100 	.word	0xe000e100

00401e64 <osc_get_rate>:
{
  401e64:	b480      	push	{r7}
  401e66:	b083      	sub	sp, #12
  401e68:	af00      	add	r7, sp, #0
  401e6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401e6c:	687b      	ldr	r3, [r7, #4]
  401e6e:	2b07      	cmp	r3, #7
  401e70:	d825      	bhi.n	401ebe <osc_get_rate+0x5a>
  401e72:	a201      	add	r2, pc, #4	; (adr r2, 401e78 <osc_get_rate+0x14>)
  401e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401e78:	00401e99 	.word	0x00401e99
  401e7c:	00401e9f 	.word	0x00401e9f
  401e80:	00401ea5 	.word	0x00401ea5
  401e84:	00401eab 	.word	0x00401eab
  401e88:	00401eaf 	.word	0x00401eaf
  401e8c:	00401eb3 	.word	0x00401eb3
  401e90:	00401eb7 	.word	0x00401eb7
  401e94:	00401ebb 	.word	0x00401ebb
		return OSC_SLCK_32K_RC_HZ;
  401e98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401e9c:	e010      	b.n	401ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ea2:	e00d      	b.n	401ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ea8:	e00a      	b.n	401ec0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401eaa:	4b08      	ldr	r3, [pc, #32]	; (401ecc <osc_get_rate+0x68>)
  401eac:	e008      	b.n	401ec0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401eae:	4b08      	ldr	r3, [pc, #32]	; (401ed0 <osc_get_rate+0x6c>)
  401eb0:	e006      	b.n	401ec0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401eb2:	4b08      	ldr	r3, [pc, #32]	; (401ed4 <osc_get_rate+0x70>)
  401eb4:	e004      	b.n	401ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401eb6:	4b07      	ldr	r3, [pc, #28]	; (401ed4 <osc_get_rate+0x70>)
  401eb8:	e002      	b.n	401ec0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401eba:	4b06      	ldr	r3, [pc, #24]	; (401ed4 <osc_get_rate+0x70>)
  401ebc:	e000      	b.n	401ec0 <osc_get_rate+0x5c>
	return 0;
  401ebe:	2300      	movs	r3, #0
}
  401ec0:	4618      	mov	r0, r3
  401ec2:	370c      	adds	r7, #12
  401ec4:	46bd      	mov	sp, r7
  401ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eca:	4770      	bx	lr
  401ecc:	003d0900 	.word	0x003d0900
  401ed0:	007a1200 	.word	0x007a1200
  401ed4:	00b71b00 	.word	0x00b71b00

00401ed8 <sysclk_get_main_hz>:
{
  401ed8:	b580      	push	{r7, lr}
  401eda:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401edc:	2006      	movs	r0, #6
  401ede:	4b05      	ldr	r3, [pc, #20]	; (401ef4 <sysclk_get_main_hz+0x1c>)
  401ee0:	4798      	blx	r3
  401ee2:	4602      	mov	r2, r0
  401ee4:	4613      	mov	r3, r2
  401ee6:	009b      	lsls	r3, r3, #2
  401ee8:	4413      	add	r3, r2
  401eea:	009a      	lsls	r2, r3, #2
  401eec:	4413      	add	r3, r2
}
  401eee:	4618      	mov	r0, r3
  401ef0:	bd80      	pop	{r7, pc}
  401ef2:	bf00      	nop
  401ef4:	00401e65 	.word	0x00401e65

00401ef8 <sysclk_get_cpu_hz>:
{
  401ef8:	b580      	push	{r7, lr}
  401efa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401efc:	4b02      	ldr	r3, [pc, #8]	; (401f08 <sysclk_get_cpu_hz+0x10>)
  401efe:	4798      	blx	r3
  401f00:	4603      	mov	r3, r0
}
  401f02:	4618      	mov	r0, r3
  401f04:	bd80      	pop	{r7, pc}
  401f06:	bf00      	nop
  401f08:	00401ed9 	.word	0x00401ed9

00401f0c <Button1_Handler>:

/**
*  Handle Interrupcao botao 1
*/
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  401f0c:	b480      	push	{r7}
  401f0e:	b083      	sub	sp, #12
  401f10:	af00      	add	r7, sp, #0
  401f12:	6078      	str	r0, [r7, #4]
  401f14:	6039      	str	r1, [r7, #0]
}
  401f16:	bf00      	nop
  401f18:	370c      	adds	r7, #12
  401f1a:	46bd      	mov	sp, r7
  401f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f20:	4770      	bx	lr
	...

00401f24 <TC1_Handler>:

/**
*  Interrupt handler for TC1 interrupt.
*/
void TC1_Handler(void){
  401f24:	b580      	push	{r7, lr}
  401f26:	b082      	sub	sp, #8
  401f28:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrupção foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  401f2a:	2101      	movs	r1, #1
  401f2c:	4806      	ldr	r0, [pc, #24]	; (401f48 <TC1_Handler+0x24>)
  401f2e:	4b07      	ldr	r3, [pc, #28]	; (401f4c <TC1_Handler+0x28>)
  401f30:	4798      	blx	r3
  401f32:	4603      	mov	r3, r0
  401f34:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  401f36:	687b      	ldr	r3, [r7, #4]

	/** Muda o estado do LED */
	flag_tc = 1;
  401f38:	4b05      	ldr	r3, [pc, #20]	; (401f50 <TC1_Handler+0x2c>)
  401f3a:	2201      	movs	r2, #1
  401f3c:	701a      	strb	r2, [r3, #0]
}
  401f3e:	bf00      	nop
  401f40:	3708      	adds	r7, #8
  401f42:	46bd      	mov	sp, r7
  401f44:	bd80      	pop	{r7, pc}
  401f46:	bf00      	nop
  401f48:	4000c000 	.word	0x4000c000
  401f4c:	0040196b 	.word	0x0040196b
  401f50:	204004e1 	.word	0x204004e1

00401f54 <pisca_led1>:


void pisca_led1(int n, int t){
  401f54:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f56:	b085      	sub	sp, #20
  401f58:	af00      	add	r7, sp, #0
  401f5a:	6078      	str	r0, [r7, #4]
  401f5c:	6039      	str	r1, [r7, #0]
	for (int i=0;i<n;i++){
  401f5e:	2300      	movs	r3, #0
  401f60:	60fb      	str	r3, [r7, #12]
  401f62:	e08e      	b.n	402082 <pisca_led1+0x12e>
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401f64:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401f68:	484a      	ldr	r0, [pc, #296]	; (402094 <pisca_led1+0x140>)
  401f6a:	4b4b      	ldr	r3, [pc, #300]	; (402098 <pisca_led1+0x144>)
  401f6c:	4798      	blx	r3
		delay_ms(t);
  401f6e:	683b      	ldr	r3, [r7, #0]
  401f70:	2b00      	cmp	r3, #0
  401f72:	d026      	beq.n	401fc2 <pisca_led1+0x6e>
  401f74:	683b      	ldr	r3, [r7, #0]
  401f76:	461d      	mov	r5, r3
  401f78:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401f7c:	4b47      	ldr	r3, [pc, #284]	; (40209c <pisca_led1+0x148>)
  401f7e:	4798      	blx	r3
  401f80:	4603      	mov	r3, r0
  401f82:	f04f 0400 	mov.w	r4, #0
  401f86:	fb03 f106 	mul.w	r1, r3, r6
  401f8a:	fb05 f204 	mul.w	r2, r5, r4
  401f8e:	440a      	add	r2, r1
  401f90:	fba5 3403 	umull	r3, r4, r5, r3
  401f94:	4422      	add	r2, r4
  401f96:	4614      	mov	r4, r2
  401f98:	f241 712b 	movw	r1, #5931	; 0x172b
  401f9c:	f04f 0200 	mov.w	r2, #0
  401fa0:	185d      	adds	r5, r3, r1
  401fa2:	eb44 0602 	adc.w	r6, r4, r2
  401fa6:	4628      	mov	r0, r5
  401fa8:	4631      	mov	r1, r6
  401faa:	4c3d      	ldr	r4, [pc, #244]	; (4020a0 <pisca_led1+0x14c>)
  401fac:	f241 722c 	movw	r2, #5932	; 0x172c
  401fb0:	f04f 0300 	mov.w	r3, #0
  401fb4:	47a0      	blx	r4
  401fb6:	4603      	mov	r3, r0
  401fb8:	460c      	mov	r4, r1
  401fba:	4618      	mov	r0, r3
  401fbc:	4b39      	ldr	r3, [pc, #228]	; (4020a4 <pisca_led1+0x150>)
  401fbe:	4798      	blx	r3
  401fc0:	e016      	b.n	401ff0 <pisca_led1+0x9c>
  401fc2:	4b36      	ldr	r3, [pc, #216]	; (40209c <pisca_led1+0x148>)
  401fc4:	4798      	blx	r3
  401fc6:	4603      	mov	r3, r0
  401fc8:	f04f 0400 	mov.w	r4, #0
  401fcc:	4936      	ldr	r1, [pc, #216]	; (4020a8 <pisca_led1+0x154>)
  401fce:	f04f 0200 	mov.w	r2, #0
  401fd2:	185d      	adds	r5, r3, r1
  401fd4:	eb44 0602 	adc.w	r6, r4, r2
  401fd8:	4628      	mov	r0, r5
  401fda:	4631      	mov	r1, r6
  401fdc:	4c30      	ldr	r4, [pc, #192]	; (4020a0 <pisca_led1+0x14c>)
  401fde:	4a33      	ldr	r2, [pc, #204]	; (4020ac <pisca_led1+0x158>)
  401fe0:	f04f 0300 	mov.w	r3, #0
  401fe4:	47a0      	blx	r4
  401fe6:	4603      	mov	r3, r0
  401fe8:	460c      	mov	r4, r1
  401fea:	4618      	mov	r0, r3
  401fec:	4b2d      	ldr	r3, [pc, #180]	; (4020a4 <pisca_led1+0x150>)
  401fee:	4798      	blx	r3
		pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401ff0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401ff4:	4827      	ldr	r0, [pc, #156]	; (402094 <pisca_led1+0x140>)
  401ff6:	4b2e      	ldr	r3, [pc, #184]	; (4020b0 <pisca_led1+0x15c>)
  401ff8:	4798      	blx	r3
		delay_ms(t);
  401ffa:	683b      	ldr	r3, [r7, #0]
  401ffc:	2b00      	cmp	r3, #0
  401ffe:	d026      	beq.n	40204e <pisca_led1+0xfa>
  402000:	683b      	ldr	r3, [r7, #0]
  402002:	461d      	mov	r5, r3
  402004:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402008:	4b24      	ldr	r3, [pc, #144]	; (40209c <pisca_led1+0x148>)
  40200a:	4798      	blx	r3
  40200c:	4603      	mov	r3, r0
  40200e:	f04f 0400 	mov.w	r4, #0
  402012:	fb03 f106 	mul.w	r1, r3, r6
  402016:	fb05 f204 	mul.w	r2, r5, r4
  40201a:	440a      	add	r2, r1
  40201c:	fba5 3403 	umull	r3, r4, r5, r3
  402020:	4422      	add	r2, r4
  402022:	4614      	mov	r4, r2
  402024:	f241 712b 	movw	r1, #5931	; 0x172b
  402028:	f04f 0200 	mov.w	r2, #0
  40202c:	185d      	adds	r5, r3, r1
  40202e:	eb44 0602 	adc.w	r6, r4, r2
  402032:	4628      	mov	r0, r5
  402034:	4631      	mov	r1, r6
  402036:	4c1a      	ldr	r4, [pc, #104]	; (4020a0 <pisca_led1+0x14c>)
  402038:	f241 722c 	movw	r2, #5932	; 0x172c
  40203c:	f04f 0300 	mov.w	r3, #0
  402040:	47a0      	blx	r4
  402042:	4603      	mov	r3, r0
  402044:	460c      	mov	r4, r1
  402046:	4618      	mov	r0, r3
  402048:	4b16      	ldr	r3, [pc, #88]	; (4020a4 <pisca_led1+0x150>)
  40204a:	4798      	blx	r3
  40204c:	e016      	b.n	40207c <pisca_led1+0x128>
  40204e:	4b13      	ldr	r3, [pc, #76]	; (40209c <pisca_led1+0x148>)
  402050:	4798      	blx	r3
  402052:	4603      	mov	r3, r0
  402054:	f04f 0400 	mov.w	r4, #0
  402058:	4913      	ldr	r1, [pc, #76]	; (4020a8 <pisca_led1+0x154>)
  40205a:	f04f 0200 	mov.w	r2, #0
  40205e:	185d      	adds	r5, r3, r1
  402060:	eb44 0602 	adc.w	r6, r4, r2
  402064:	4628      	mov	r0, r5
  402066:	4631      	mov	r1, r6
  402068:	4c0d      	ldr	r4, [pc, #52]	; (4020a0 <pisca_led1+0x14c>)
  40206a:	4a10      	ldr	r2, [pc, #64]	; (4020ac <pisca_led1+0x158>)
  40206c:	f04f 0300 	mov.w	r3, #0
  402070:	47a0      	blx	r4
  402072:	4603      	mov	r3, r0
  402074:	460c      	mov	r4, r1
  402076:	4618      	mov	r0, r3
  402078:	4b0a      	ldr	r3, [pc, #40]	; (4020a4 <pisca_led1+0x150>)
  40207a:	4798      	blx	r3
	for (int i=0;i<n;i++){
  40207c:	68fb      	ldr	r3, [r7, #12]
  40207e:	3301      	adds	r3, #1
  402080:	60fb      	str	r3, [r7, #12]
  402082:	68fa      	ldr	r2, [r7, #12]
  402084:	687b      	ldr	r3, [r7, #4]
  402086:	429a      	cmp	r2, r3
  402088:	f6ff af6c 	blt.w	401f64 <pisca_led1+0x10>
	}
}
  40208c:	bf00      	nop
  40208e:	3714      	adds	r7, #20
  402090:	46bd      	mov	sp, r7
  402092:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402094:	400e1200 	.word	0x400e1200
  402098:	00400571 	.word	0x00400571
  40209c:	00401ef9 	.word	0x00401ef9
  4020a0:	00402735 	.word	0x00402735
  4020a4:	20400001 	.word	0x20400001
  4020a8:	005a83df 	.word	0x005a83df
  4020ac:	005a83e0 	.word	0x005a83e0
  4020b0:	00400555 	.word	0x00400555

004020b4 <RTT_Handler>:

void RTT_Handler(void)
{
  4020b4:	b580      	push	{r7, lr}
  4020b6:	b082      	sub	sp, #8
  4020b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  4020ba:	480a      	ldr	r0, [pc, #40]	; (4020e4 <RTT_Handler+0x30>)
  4020bc:	4b0a      	ldr	r3, [pc, #40]	; (4020e8 <RTT_Handler+0x34>)
  4020be:	4798      	blx	r3
  4020c0:	6078      	str	r0, [r7, #4]

	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  4020c2:	687b      	ldr	r3, [r7, #4]
  4020c4:	f003 0301 	and.w	r3, r3, #1
  4020c8:	2b00      	cmp	r3, #0
  4020ca:	d007      	beq.n	4020dc <RTT_Handler+0x28>
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);    // BLINK Led
  4020cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4020d0:	4806      	ldr	r0, [pc, #24]	; (4020ec <RTT_Handler+0x38>)
  4020d2:	4b07      	ldr	r3, [pc, #28]	; (4020f0 <RTT_Handler+0x3c>)
  4020d4:	4798      	blx	r3
		f_rtt_alarme = true;                  // flag RTT alarme
  4020d6:	4b07      	ldr	r3, [pc, #28]	; (4020f4 <RTT_Handler+0x40>)
  4020d8:	2201      	movs	r2, #1
  4020da:	701a      	strb	r2, [r3, #0]
	}
}
  4020dc:	bf00      	nop
  4020de:	3708      	adds	r7, #8
  4020e0:	46bd      	mov	sp, r7
  4020e2:	bd80      	pop	{r7, pc}
  4020e4:	400e1830 	.word	0x400e1830
  4020e8:	0040184b 	.word	0x0040184b
  4020ec:	400e1400 	.word	0x400e1400
  4020f0:	004022dd 	.word	0x004022dd
  4020f4:	204004e2 	.word	0x204004e2

004020f8 <RTC_Handler>:

/**
* \brief Interrupt handler for the RTC. Refresh the display.
*/
void RTC_Handler(void){
  4020f8:	b580      	push	{r7, lr}
  4020fa:	b082      	sub	sp, #8
  4020fc:	af00      	add	r7, sp, #0
	uint32_t ul_status = rtc_get_status(RTC);
  4020fe:	4819      	ldr	r0, [pc, #100]	; (402164 <RTC_Handler+0x6c>)
  402100:	4b19      	ldr	r3, [pc, #100]	; (402168 <RTC_Handler+0x70>)
  402102:	4798      	blx	r3
  402104:	6078      	str	r0, [r7, #4]

	/* Sec IRQ */
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC){
  402106:	687b      	ldr	r3, [r7, #4]
  402108:	f003 0304 	and.w	r3, r3, #4
  40210c:	2b00      	cmp	r3, #0
  40210e:	d003      	beq.n	402118 <RTC_Handler+0x20>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  402110:	2104      	movs	r1, #4
  402112:	4814      	ldr	r0, [pc, #80]	; (402164 <RTC_Handler+0x6c>)
  402114:	4b15      	ldr	r3, [pc, #84]	; (40216c <RTC_Handler+0x74>)
  402116:	4798      	blx	r3
	}

	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM){
  402118:	687b      	ldr	r3, [r7, #4]
  40211a:	f003 0302 	and.w	r3, r3, #2
  40211e:	2b00      	cmp	r3, #0
  402120:	d008      	beq.n	402134 <RTC_Handler+0x3c>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  402122:	2102      	movs	r1, #2
  402124:	480f      	ldr	r0, [pc, #60]	; (402164 <RTC_Handler+0x6c>)
  402126:	4b11      	ldr	r3, [pc, #68]	; (40216c <RTC_Handler+0x74>)
  402128:	4798      	blx	r3
		pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  40212a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40212e:	4810      	ldr	r0, [pc, #64]	; (402170 <RTC_Handler+0x78>)
  402130:	4b10      	ldr	r3, [pc, #64]	; (402174 <RTC_Handler+0x7c>)
  402132:	4798      	blx	r3
	}
	flag_rtc = 1;
  402134:	4b10      	ldr	r3, [pc, #64]	; (402178 <RTC_Handler+0x80>)
  402136:	2201      	movs	r2, #1
  402138:	701a      	strb	r2, [r3, #0]

	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40213a:	2101      	movs	r1, #1
  40213c:	4809      	ldr	r0, [pc, #36]	; (402164 <RTC_Handler+0x6c>)
  40213e:	4b0b      	ldr	r3, [pc, #44]	; (40216c <RTC_Handler+0x74>)
  402140:	4798      	blx	r3
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  402142:	2108      	movs	r1, #8
  402144:	4807      	ldr	r0, [pc, #28]	; (402164 <RTC_Handler+0x6c>)
  402146:	4b09      	ldr	r3, [pc, #36]	; (40216c <RTC_Handler+0x74>)
  402148:	4798      	blx	r3
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  40214a:	2110      	movs	r1, #16
  40214c:	4805      	ldr	r0, [pc, #20]	; (402164 <RTC_Handler+0x6c>)
  40214e:	4b07      	ldr	r3, [pc, #28]	; (40216c <RTC_Handler+0x74>)
  402150:	4798      	blx	r3
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  402152:	2120      	movs	r1, #32
  402154:	4803      	ldr	r0, [pc, #12]	; (402164 <RTC_Handler+0x6c>)
  402156:	4b05      	ldr	r3, [pc, #20]	; (40216c <RTC_Handler+0x74>)
  402158:	4798      	blx	r3
}
  40215a:	bf00      	nop
  40215c:	3708      	adds	r7, #8
  40215e:	46bd      	mov	sp, r7
  402160:	bd80      	pop	{r7, pc}
  402162:	bf00      	nop
  402164:	400e1860 	.word	0x400e1860
  402168:	004016e9 	.word	0x004016e9
  40216c:	00401701 	.word	0x00401701
  402170:	400e1400 	.word	0x400e1400
  402174:	004022dd 	.word	0x004022dd
  402178:	204004e0 	.word	0x204004e0

0040217c <pisca_led3>:
/************************************************************************/
/* Funcoes                                                              */
/************************************************************************/

//Pisca LED
void pisca_led3(int n, int t){
  40217c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40217e:	b085      	sub	sp, #20
  402180:	af00      	add	r7, sp, #0
  402182:	6078      	str	r0, [r7, #4]
  402184:	6039      	str	r1, [r7, #0]
	for (int i=0;i<n;i++){
  402186:	2300      	movs	r3, #0
  402188:	60fb      	str	r3, [r7, #12]
  40218a:	e08e      	b.n	4022aa <pisca_led3+0x12e>
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  40218c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402190:	484a      	ldr	r0, [pc, #296]	; (4022bc <pisca_led3+0x140>)
  402192:	4b4b      	ldr	r3, [pc, #300]	; (4022c0 <pisca_led3+0x144>)
  402194:	4798      	blx	r3
		delay_ms(t);
  402196:	683b      	ldr	r3, [r7, #0]
  402198:	2b00      	cmp	r3, #0
  40219a:	d026      	beq.n	4021ea <pisca_led3+0x6e>
  40219c:	683b      	ldr	r3, [r7, #0]
  40219e:	461d      	mov	r5, r3
  4021a0:	ea4f 76e5 	mov.w	r6, r5, asr #31
  4021a4:	4b47      	ldr	r3, [pc, #284]	; (4022c4 <pisca_led3+0x148>)
  4021a6:	4798      	blx	r3
  4021a8:	4603      	mov	r3, r0
  4021aa:	f04f 0400 	mov.w	r4, #0
  4021ae:	fb03 f106 	mul.w	r1, r3, r6
  4021b2:	fb05 f204 	mul.w	r2, r5, r4
  4021b6:	440a      	add	r2, r1
  4021b8:	fba5 3403 	umull	r3, r4, r5, r3
  4021bc:	4422      	add	r2, r4
  4021be:	4614      	mov	r4, r2
  4021c0:	f241 712b 	movw	r1, #5931	; 0x172b
  4021c4:	f04f 0200 	mov.w	r2, #0
  4021c8:	185d      	adds	r5, r3, r1
  4021ca:	eb44 0602 	adc.w	r6, r4, r2
  4021ce:	4628      	mov	r0, r5
  4021d0:	4631      	mov	r1, r6
  4021d2:	4c3d      	ldr	r4, [pc, #244]	; (4022c8 <pisca_led3+0x14c>)
  4021d4:	f241 722c 	movw	r2, #5932	; 0x172c
  4021d8:	f04f 0300 	mov.w	r3, #0
  4021dc:	47a0      	blx	r4
  4021de:	4603      	mov	r3, r0
  4021e0:	460c      	mov	r4, r1
  4021e2:	4618      	mov	r0, r3
  4021e4:	4b39      	ldr	r3, [pc, #228]	; (4022cc <pisca_led3+0x150>)
  4021e6:	4798      	blx	r3
  4021e8:	e016      	b.n	402218 <pisca_led3+0x9c>
  4021ea:	4b36      	ldr	r3, [pc, #216]	; (4022c4 <pisca_led3+0x148>)
  4021ec:	4798      	blx	r3
  4021ee:	4603      	mov	r3, r0
  4021f0:	f04f 0400 	mov.w	r4, #0
  4021f4:	4936      	ldr	r1, [pc, #216]	; (4022d0 <pisca_led3+0x154>)
  4021f6:	f04f 0200 	mov.w	r2, #0
  4021fa:	185d      	adds	r5, r3, r1
  4021fc:	eb44 0602 	adc.w	r6, r4, r2
  402200:	4628      	mov	r0, r5
  402202:	4631      	mov	r1, r6
  402204:	4c30      	ldr	r4, [pc, #192]	; (4022c8 <pisca_led3+0x14c>)
  402206:	4a33      	ldr	r2, [pc, #204]	; (4022d4 <pisca_led3+0x158>)
  402208:	f04f 0300 	mov.w	r3, #0
  40220c:	47a0      	blx	r4
  40220e:	4603      	mov	r3, r0
  402210:	460c      	mov	r4, r1
  402212:	4618      	mov	r0, r3
  402214:	4b2d      	ldr	r3, [pc, #180]	; (4022cc <pisca_led3+0x150>)
  402216:	4798      	blx	r3
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  402218:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40221c:	4827      	ldr	r0, [pc, #156]	; (4022bc <pisca_led3+0x140>)
  40221e:	4b2e      	ldr	r3, [pc, #184]	; (4022d8 <pisca_led3+0x15c>)
  402220:	4798      	blx	r3
		delay_ms(t);
  402222:	683b      	ldr	r3, [r7, #0]
  402224:	2b00      	cmp	r3, #0
  402226:	d026      	beq.n	402276 <pisca_led3+0xfa>
  402228:	683b      	ldr	r3, [r7, #0]
  40222a:	461d      	mov	r5, r3
  40222c:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402230:	4b24      	ldr	r3, [pc, #144]	; (4022c4 <pisca_led3+0x148>)
  402232:	4798      	blx	r3
  402234:	4603      	mov	r3, r0
  402236:	f04f 0400 	mov.w	r4, #0
  40223a:	fb03 f106 	mul.w	r1, r3, r6
  40223e:	fb05 f204 	mul.w	r2, r5, r4
  402242:	440a      	add	r2, r1
  402244:	fba5 3403 	umull	r3, r4, r5, r3
  402248:	4422      	add	r2, r4
  40224a:	4614      	mov	r4, r2
  40224c:	f241 712b 	movw	r1, #5931	; 0x172b
  402250:	f04f 0200 	mov.w	r2, #0
  402254:	185d      	adds	r5, r3, r1
  402256:	eb44 0602 	adc.w	r6, r4, r2
  40225a:	4628      	mov	r0, r5
  40225c:	4631      	mov	r1, r6
  40225e:	4c1a      	ldr	r4, [pc, #104]	; (4022c8 <pisca_led3+0x14c>)
  402260:	f241 722c 	movw	r2, #5932	; 0x172c
  402264:	f04f 0300 	mov.w	r3, #0
  402268:	47a0      	blx	r4
  40226a:	4603      	mov	r3, r0
  40226c:	460c      	mov	r4, r1
  40226e:	4618      	mov	r0, r3
  402270:	4b16      	ldr	r3, [pc, #88]	; (4022cc <pisca_led3+0x150>)
  402272:	4798      	blx	r3
  402274:	e016      	b.n	4022a4 <pisca_led3+0x128>
  402276:	4b13      	ldr	r3, [pc, #76]	; (4022c4 <pisca_led3+0x148>)
  402278:	4798      	blx	r3
  40227a:	4603      	mov	r3, r0
  40227c:	f04f 0400 	mov.w	r4, #0
  402280:	4913      	ldr	r1, [pc, #76]	; (4022d0 <pisca_led3+0x154>)
  402282:	f04f 0200 	mov.w	r2, #0
  402286:	185d      	adds	r5, r3, r1
  402288:	eb44 0602 	adc.w	r6, r4, r2
  40228c:	4628      	mov	r0, r5
  40228e:	4631      	mov	r1, r6
  402290:	4c0d      	ldr	r4, [pc, #52]	; (4022c8 <pisca_led3+0x14c>)
  402292:	4a10      	ldr	r2, [pc, #64]	; (4022d4 <pisca_led3+0x158>)
  402294:	f04f 0300 	mov.w	r3, #0
  402298:	47a0      	blx	r4
  40229a:	4603      	mov	r3, r0
  40229c:	460c      	mov	r4, r1
  40229e:	4618      	mov	r0, r3
  4022a0:	4b0a      	ldr	r3, [pc, #40]	; (4022cc <pisca_led3+0x150>)
  4022a2:	4798      	blx	r3
	for (int i=0;i<n;i++){
  4022a4:	68fb      	ldr	r3, [r7, #12]
  4022a6:	3301      	adds	r3, #1
  4022a8:	60fb      	str	r3, [r7, #12]
  4022aa:	68fa      	ldr	r2, [r7, #12]
  4022ac:	687b      	ldr	r3, [r7, #4]
  4022ae:	429a      	cmp	r2, r3
  4022b0:	f6ff af6c 	blt.w	40218c <pisca_led3+0x10>
	}
}
  4022b4:	bf00      	nop
  4022b6:	3714      	adds	r7, #20
  4022b8:	46bd      	mov	sp, r7
  4022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4022bc:	400e1400 	.word	0x400e1400
  4022c0:	00400571 	.word	0x00400571
  4022c4:	00401ef9 	.word	0x00401ef9
  4022c8:	00402735 	.word	0x00402735
  4022cc:	20400001 	.word	0x20400001
  4022d0:	005a83df 	.word	0x005a83df
  4022d4:	005a83e0 	.word	0x005a83e0
  4022d8:	00400555 	.word	0x00400555

004022dc <pin_toggle>:

/**
*  Toggle pin controlado pelo PIO (out)
*/
void pin_toggle(Pio *pio, uint32_t mask){
  4022dc:	b580      	push	{r7, lr}
  4022de:	b082      	sub	sp, #8
  4022e0:	af00      	add	r7, sp, #0
  4022e2:	6078      	str	r0, [r7, #4]
  4022e4:	6039      	str	r1, [r7, #0]
	if (pio_get_output_data_status(pio, mask))
  4022e6:	6839      	ldr	r1, [r7, #0]
  4022e8:	6878      	ldr	r0, [r7, #4]
  4022ea:	4b09      	ldr	r3, [pc, #36]	; (402310 <pin_toggle+0x34>)
  4022ec:	4798      	blx	r3
  4022ee:	4603      	mov	r3, r0
  4022f0:	2b00      	cmp	r3, #0
  4022f2:	d004      	beq.n	4022fe <pin_toggle+0x22>
		pio_clear(pio, mask);
  4022f4:	6839      	ldr	r1, [r7, #0]
  4022f6:	6878      	ldr	r0, [r7, #4]
  4022f8:	4b06      	ldr	r3, [pc, #24]	; (402314 <pin_toggle+0x38>)
  4022fa:	4798      	blx	r3
	else
		pio_set(pio, mask);
}
  4022fc:	e003      	b.n	402306 <pin_toggle+0x2a>
		pio_set(pio, mask);
  4022fe:	6839      	ldr	r1, [r7, #0]
  402300:	6878      	ldr	r0, [r7, #4]
  402302:	4b05      	ldr	r3, [pc, #20]	; (402318 <pin_toggle+0x3c>)
  402304:	4798      	blx	r3
}
  402306:	bf00      	nop
  402308:	3708      	adds	r7, #8
  40230a:	46bd      	mov	sp, r7
  40230c:	bd80      	pop	{r7, pc}
  40230e:	bf00      	nop
  402310:	0040084d 	.word	0x0040084d
  402314:	00400571 	.word	0x00400571
  402318:	00400555 	.word	0x00400555

0040231c <io_init>:

void io_init(void){
  40231c:	b598      	push	{r3, r4, r7, lr}
  40231e:	af00      	add	r7, sp, #0
	/* led */
	pmc_enable_periph_clk(LED2_PIO_ID);
  402320:	2010      	movs	r0, #16
  402322:	4b06      	ldr	r3, [pc, #24]	; (40233c <io_init+0x20>)
  402324:	4798      	blx	r3
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  402326:	2300      	movs	r3, #0
  402328:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40232c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402330:	4803      	ldr	r0, [pc, #12]	; (402340 <io_init+0x24>)
  402332:	4c04      	ldr	r4, [pc, #16]	; (402344 <io_init+0x28>)
  402334:	47a0      	blx	r4
}
  402336:	bf00      	nop
  402338:	bd98      	pop	{r3, r4, r7, pc}
  40233a:	bf00      	nop
  40233c:	00400dd9 	.word	0x00400dd9
  402340:	400e1400 	.word	0x400e1400
  402344:	00400781 	.word	0x00400781

00402348 <RTT_init>:
static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses)
{
  402348:	b580      	push	{r7, lr}
  40234a:	b084      	sub	sp, #16
  40234c:	af00      	add	r7, sp, #0
  40234e:	4603      	mov	r3, r0
  402350:	6039      	str	r1, [r7, #0]
  402352:	80fb      	strh	r3, [r7, #6]
	uint32_t ul_previous_time;

	/* Configure RTT for a 1 second tick interrupt */
	rtt_sel_source(RTT, false);
  402354:	2100      	movs	r1, #0
  402356:	4818      	ldr	r0, [pc, #96]	; (4023b8 <RTT_init+0x70>)
  402358:	4b18      	ldr	r3, [pc, #96]	; (4023bc <RTT_init+0x74>)
  40235a:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  40235c:	88fb      	ldrh	r3, [r7, #6]
  40235e:	4619      	mov	r1, r3
  402360:	4815      	ldr	r0, [pc, #84]	; (4023b8 <RTT_init+0x70>)
  402362:	4b17      	ldr	r3, [pc, #92]	; (4023c0 <RTT_init+0x78>)
  402364:	4798      	blx	r3
	
	ul_previous_time = rtt_read_timer_value(RTT);
  402366:	4814      	ldr	r0, [pc, #80]	; (4023b8 <RTT_init+0x70>)
  402368:	4b16      	ldr	r3, [pc, #88]	; (4023c4 <RTT_init+0x7c>)
  40236a:	4798      	blx	r3
  40236c:	60f8      	str	r0, [r7, #12]
	while (ul_previous_time == rtt_read_timer_value(RTT));
  40236e:	bf00      	nop
  402370:	4811      	ldr	r0, [pc, #68]	; (4023b8 <RTT_init+0x70>)
  402372:	4b14      	ldr	r3, [pc, #80]	; (4023c4 <RTT_init+0x7c>)
  402374:	4798      	blx	r3
  402376:	4602      	mov	r2, r0
  402378:	68fb      	ldr	r3, [r7, #12]
  40237a:	429a      	cmp	r2, r3
  40237c:	d0f8      	beq.n	402370 <RTT_init+0x28>
	
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  40237e:	683a      	ldr	r2, [r7, #0]
  402380:	68fb      	ldr	r3, [r7, #12]
  402382:	4413      	add	r3, r2
  402384:	4619      	mov	r1, r3
  402386:	480c      	ldr	r0, [pc, #48]	; (4023b8 <RTT_init+0x70>)
  402388:	4b0f      	ldr	r3, [pc, #60]	; (4023c8 <RTT_init+0x80>)
  40238a:	4798      	blx	r3

	/* Enable RTT interrupt */
	NVIC_DisableIRQ(RTT_IRQn);
  40238c:	2003      	movs	r0, #3
  40238e:	4b0f      	ldr	r3, [pc, #60]	; (4023cc <RTT_init+0x84>)
  402390:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  402392:	2003      	movs	r0, #3
  402394:	4b0e      	ldr	r3, [pc, #56]	; (4023d0 <RTT_init+0x88>)
  402396:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 0);
  402398:	2100      	movs	r1, #0
  40239a:	2003      	movs	r0, #3
  40239c:	4b0d      	ldr	r3, [pc, #52]	; (4023d4 <RTT_init+0x8c>)
  40239e:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  4023a0:	2003      	movs	r0, #3
  4023a2:	4b0d      	ldr	r3, [pc, #52]	; (4023d8 <RTT_init+0x90>)
  4023a4:	4798      	blx	r3
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4023a6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4023aa:	4803      	ldr	r0, [pc, #12]	; (4023b8 <RTT_init+0x70>)
  4023ac:	4b0b      	ldr	r3, [pc, #44]	; (4023dc <RTT_init+0x94>)
  4023ae:	4798      	blx	r3
}
  4023b0:	bf00      	nop
  4023b2:	3710      	adds	r7, #16
  4023b4:	46bd      	mov	sp, r7
  4023b6:	bd80      	pop	{r7, pc}
  4023b8:	400e1830 	.word	0x400e1830
  4023bc:	0040174d 	.word	0x0040174d
  4023c0:	0040171d 	.word	0x0040171d
  4023c4:	0040181d 	.word	0x0040181d
  4023c8:	00401865 	.word	0x00401865
  4023cc:	00401da9 	.word	0x00401da9
  4023d0:	00401ddd 	.word	0x00401ddd
  4023d4:	00401e11 	.word	0x00401e11
  4023d8:	00401d75 	.word	0x00401d75
  4023dc:	004017a5 	.word	0x004017a5

004023e0 <BUT_init>:

/**
* @Brief Inicializa o pino do BUT
*/
void BUT_init(void){
  4023e0:	b590      	push	{r4, r7, lr}
  4023e2:	b083      	sub	sp, #12
  4023e4:	af02      	add	r7, sp, #8
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(BUT_PIO_ID);
  4023e6:	200a      	movs	r0, #10
  4023e8:	4b10      	ldr	r3, [pc, #64]	; (40242c <BUT_init+0x4c>)
  4023ea:	4798      	blx	r3
	pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4023ec:	2209      	movs	r2, #9
  4023ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4023f2:	480f      	ldr	r0, [pc, #60]	; (402430 <BUT_init+0x50>)
  4023f4:	4b0f      	ldr	r3, [pc, #60]	; (402434 <BUT_init+0x54>)
  4023f6:	4798      	blx	r3

	/* config. interrupcao em borda de descida no botao do kit */
	/* indica funcao (but_Handler) a ser chamada quando houver uma interrupção */
	pio_enable_interrupt(BUT_PIO, BUT_PIN_MASK);
  4023f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4023fc:	480c      	ldr	r0, [pc, #48]	; (402430 <BUT_init+0x50>)
  4023fe:	4b0e      	ldr	r3, [pc, #56]	; (402438 <BUT_init+0x58>)
  402400:	4798      	blx	r3
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK, PIO_IT_FALL_EDGE, Button1_Handler);
  402402:	4b0e      	ldr	r3, [pc, #56]	; (40243c <BUT_init+0x5c>)
  402404:	9300      	str	r3, [sp, #0]
  402406:	2350      	movs	r3, #80	; 0x50
  402408:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40240c:	210a      	movs	r1, #10
  40240e:	4808      	ldr	r0, [pc, #32]	; (402430 <BUT_init+0x50>)
  402410:	4c0b      	ldr	r4, [pc, #44]	; (402440 <BUT_init+0x60>)
  402412:	47a0      	blx	r4

	/* habilita interrupçcão do PIO que controla o botao */
	/* e configura sua prioridade                        */
	NVIC_EnableIRQ(BUT_PIO_ID);
  402414:	200a      	movs	r0, #10
  402416:	4b0b      	ldr	r3, [pc, #44]	; (402444 <BUT_init+0x64>)
  402418:	4798      	blx	r3
	NVIC_SetPriority(BUT_PIO_ID, 1);
  40241a:	2101      	movs	r1, #1
  40241c:	200a      	movs	r0, #10
  40241e:	4b0a      	ldr	r3, [pc, #40]	; (402448 <BUT_init+0x68>)
  402420:	4798      	blx	r3
};
  402422:	bf00      	nop
  402424:	3704      	adds	r7, #4
  402426:	46bd      	mov	sp, r7
  402428:	bd90      	pop	{r4, r7, pc}
  40242a:	bf00      	nop
  40242c:	00400dd9 	.word	0x00400dd9
  402430:	400e0e00 	.word	0x400e0e00
  402434:	0040069d 	.word	0x0040069d
  402438:	004008e1 	.word	0x004008e1
  40243c:	00401f0d 	.word	0x00401f0d
  402440:	004009fd 	.word	0x004009fd
  402444:	00401d75 	.word	0x00401d75
  402448:	00401e11 	.word	0x00401e11

0040244c <LED_init>:

/**
* @Brief Inicializa o pino do LED
*/
void LED_init(int estado){
  40244c:	b590      	push	{r4, r7, lr}
  40244e:	b085      	sub	sp, #20
  402450:	af02      	add	r7, sp, #8
  402452:	6078      	str	r0, [r7, #4]
	
	// Ativa PIOs necessários
	pmc_enable_periph_clk(LED1_PIO_ID);
  402454:	200c      	movs	r0, #12
  402456:	4b13      	ldr	r3, [pc, #76]	; (4024a4 <LED_init+0x58>)
  402458:	4798      	blx	r3
	pmc_enable_periph_clk(LED2_PIO_ID);
  40245a:	2010      	movs	r0, #16
  40245c:	4b11      	ldr	r3, [pc, #68]	; (4024a4 <LED_init+0x58>)
  40245e:	4798      	blx	r3
	pmc_enable_periph_clk(LED3_PIO_ID);
  402460:	2010      	movs	r0, #16
  402462:	4b10      	ldr	r3, [pc, #64]	; (4024a4 <LED_init+0x58>)
  402464:	4798      	blx	r3
	
	// Inicializa LEDs como saída
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, estado, 0, 0);
  402466:	687a      	ldr	r2, [r7, #4]
  402468:	2300      	movs	r3, #0
  40246a:	9300      	str	r3, [sp, #0]
  40246c:	2300      	movs	r3, #0
  40246e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402472:	480d      	ldr	r0, [pc, #52]	; (4024a8 <LED_init+0x5c>)
  402474:	4c0d      	ldr	r4, [pc, #52]	; (4024ac <LED_init+0x60>)
  402476:	47a0      	blx	r4
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, estado, 0, 0);
  402478:	687a      	ldr	r2, [r7, #4]
  40247a:	2300      	movs	r3, #0
  40247c:	9300      	str	r3, [sp, #0]
  40247e:	2300      	movs	r3, #0
  402480:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402484:	480a      	ldr	r0, [pc, #40]	; (4024b0 <LED_init+0x64>)
  402486:	4c09      	ldr	r4, [pc, #36]	; (4024ac <LED_init+0x60>)
  402488:	47a0      	blx	r4
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, estado, 0, 0);
  40248a:	687a      	ldr	r2, [r7, #4]
  40248c:	2300      	movs	r3, #0
  40248e:	9300      	str	r3, [sp, #0]
  402490:	2300      	movs	r3, #0
  402492:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402496:	4806      	ldr	r0, [pc, #24]	; (4024b0 <LED_init+0x64>)
  402498:	4c04      	ldr	r4, [pc, #16]	; (4024ac <LED_init+0x60>)
  40249a:	47a0      	blx	r4

};
  40249c:	bf00      	nop
  40249e:	370c      	adds	r7, #12
  4024a0:	46bd      	mov	sp, r7
  4024a2:	bd90      	pop	{r4, r7, pc}
  4024a4:	00400dd9 	.word	0x00400dd9
  4024a8:	400e1200 	.word	0x400e1200
  4024ac:	0040071d 	.word	0x0040071d
  4024b0:	400e1400 	.word	0x400e1400

004024b4 <TC_init>:
/**
* Configura o TC para funcionar
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4024b4:	b590      	push	{r4, r7, lr}
  4024b6:	b08b      	sub	sp, #44	; 0x2c
  4024b8:	af02      	add	r7, sp, #8
  4024ba:	60f8      	str	r0, [r7, #12]
  4024bc:	60b9      	str	r1, [r7, #8]
  4024be:	607a      	str	r2, [r7, #4]
  4024c0:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4024c2:	4b1d      	ldr	r3, [pc, #116]	; (402538 <TC_init+0x84>)
  4024c4:	4798      	blx	r3
  4024c6:	61f8      	str	r0, [r7, #28]
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  4024c8:	68bb      	ldr	r3, [r7, #8]
  4024ca:	4618      	mov	r0, r3
  4024cc:	4b1b      	ldr	r3, [pc, #108]	; (40253c <TC_init+0x88>)
  4024ce:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrupçcão no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4024d0:	6838      	ldr	r0, [r7, #0]
  4024d2:	f107 0114 	add.w	r1, r7, #20
  4024d6:	f107 0218 	add.w	r2, r7, #24
  4024da:	69fb      	ldr	r3, [r7, #28]
  4024dc:	9300      	str	r3, [sp, #0]
  4024de:	460b      	mov	r3, r1
  4024e0:	69f9      	ldr	r1, [r7, #28]
  4024e2:	4c17      	ldr	r4, [pc, #92]	; (402540 <TC_init+0x8c>)
  4024e4:	47a0      	blx	r4
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4024e6:	6879      	ldr	r1, [r7, #4]
  4024e8:	697b      	ldr	r3, [r7, #20]
  4024ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4024ee:	461a      	mov	r2, r3
  4024f0:	68f8      	ldr	r0, [r7, #12]
  4024f2:	4b14      	ldr	r3, [pc, #80]	; (402544 <TC_init+0x90>)
  4024f4:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4024f6:	6879      	ldr	r1, [r7, #4]
  4024f8:	69bb      	ldr	r3, [r7, #24]
  4024fa:	69fa      	ldr	r2, [r7, #28]
  4024fc:	fbb2 f2f3 	udiv	r2, r2, r3
  402500:	683b      	ldr	r3, [r7, #0]
  402502:	fbb2 f3f3 	udiv	r3, r2, r3
  402506:	461a      	mov	r2, r3
  402508:	68f8      	ldr	r0, [r7, #12]
  40250a:	4b0f      	ldr	r3, [pc, #60]	; (402548 <TC_init+0x94>)
  40250c:	4798      	blx	r3

	/* Configura e ativa interrupçcão no TC canal 0 */
	/* Interrupção no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
  40250e:	68bb      	ldr	r3, [r7, #8]
  402510:	b25b      	sxtb	r3, r3
  402512:	4618      	mov	r0, r3
  402514:	4b0d      	ldr	r3, [pc, #52]	; (40254c <TC_init+0x98>)
  402516:	4798      	blx	r3
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  402518:	687b      	ldr	r3, [r7, #4]
  40251a:	2210      	movs	r2, #16
  40251c:	4619      	mov	r1, r3
  40251e:	68f8      	ldr	r0, [r7, #12]
  402520:	4b0b      	ldr	r3, [pc, #44]	; (402550 <TC_init+0x9c>)
  402522:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  402524:	687b      	ldr	r3, [r7, #4]
  402526:	4619      	mov	r1, r3
  402528:	68f8      	ldr	r0, [r7, #12]
  40252a:	4b0a      	ldr	r3, [pc, #40]	; (402554 <TC_init+0xa0>)
  40252c:	4798      	blx	r3
}
  40252e:	bf00      	nop
  402530:	3724      	adds	r7, #36	; 0x24
  402532:	46bd      	mov	sp, r7
  402534:	bd90      	pop	{r4, r7, pc}
  402536:	bf00      	nop
  402538:	00401ef9 	.word	0x00401ef9
  40253c:	00400dd9 	.word	0x00400dd9
  402540:	0040198f 	.word	0x0040198f
  402544:	004018c1 	.word	0x004018c1
  402548:	0040191d 	.word	0x0040191d
  40254c:	00401d75 	.word	0x00401d75
  402550:	00401943 	.word	0x00401943
  402554:	004018fb 	.word	0x004018fb

00402558 <RTC_init>:

/**
* Configura o RTC para funcionar com interrupcao de alarme
*/
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  402558:	b082      	sub	sp, #8
  40255a:	b590      	push	{r4, r7, lr}
  40255c:	b085      	sub	sp, #20
  40255e:	af02      	add	r7, sp, #8
  402560:	6078      	str	r0, [r7, #4]
  402562:	6039      	str	r1, [r7, #0]
  402564:	f107 0118 	add.w	r1, r7, #24
  402568:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  40256c:	2002      	movs	r0, #2
  40256e:	4b1a      	ldr	r3, [pc, #104]	; (4025d8 <RTC_init+0x80>)
  402570:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  402572:	2100      	movs	r1, #0
  402574:	6878      	ldr	r0, [r7, #4]
  402576:	4b19      	ldr	r3, [pc, #100]	; (4025dc <RTC_init+0x84>)
  402578:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  40257a:	69b9      	ldr	r1, [r7, #24]
  40257c:	69fa      	ldr	r2, [r7, #28]
  40257e:	6a38      	ldr	r0, [r7, #32]
  402580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402582:	9300      	str	r3, [sp, #0]
  402584:	4603      	mov	r3, r0
  402586:	6878      	ldr	r0, [r7, #4]
  402588:	4c15      	ldr	r4, [pc, #84]	; (4025e0 <RTC_init+0x88>)
  40258a:	47a0      	blx	r4
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  40258c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  40258e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402592:	6878      	ldr	r0, [r7, #4]
  402594:	4c13      	ldr	r4, [pc, #76]	; (4025e4 <RTC_init+0x8c>)
  402596:	47a0      	blx	r4

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  402598:	683b      	ldr	r3, [r7, #0]
  40259a:	b25b      	sxtb	r3, r3
  40259c:	4618      	mov	r0, r3
  40259e:	4b12      	ldr	r3, [pc, #72]	; (4025e8 <RTC_init+0x90>)
  4025a0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(id_rtc);
  4025a2:	683b      	ldr	r3, [r7, #0]
  4025a4:	b25b      	sxtb	r3, r3
  4025a6:	4618      	mov	r0, r3
  4025a8:	4b10      	ldr	r3, [pc, #64]	; (4025ec <RTC_init+0x94>)
  4025aa:	4798      	blx	r3
	NVIC_SetPriority(id_rtc, 0);
  4025ac:	683b      	ldr	r3, [r7, #0]
  4025ae:	b25b      	sxtb	r3, r3
  4025b0:	2100      	movs	r1, #0
  4025b2:	4618      	mov	r0, r3
  4025b4:	4b0e      	ldr	r3, [pc, #56]	; (4025f0 <RTC_init+0x98>)
  4025b6:	4798      	blx	r3
	NVIC_EnableIRQ(id_rtc);
  4025b8:	683b      	ldr	r3, [r7, #0]
  4025ba:	b25b      	sxtb	r3, r3
  4025bc:	4618      	mov	r0, r3
  4025be:	4b0d      	ldr	r3, [pc, #52]	; (4025f4 <RTC_init+0x9c>)
  4025c0:	4798      	blx	r3

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc, irq_type);
  4025c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
  4025c4:	6878      	ldr	r0, [r7, #4]
  4025c6:	4b0c      	ldr	r3, [pc, #48]	; (4025f8 <RTC_init+0xa0>)
  4025c8:	4798      	blx	r3
}
  4025ca:	bf00      	nop
  4025cc:	370c      	adds	r7, #12
  4025ce:	46bd      	mov	sp, r7
  4025d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
  4025d4:	b002      	add	sp, #8
  4025d6:	4770      	bx	lr
  4025d8:	00400dd9 	.word	0x00400dd9
  4025dc:	004012a1 	.word	0x004012a1
  4025e0:	004014fd 	.word	0x004014fd
  4025e4:	004012f5 	.word	0x004012f5
  4025e8:	00401da9 	.word	0x00401da9
  4025ec:	00401ddd 	.word	0x00401ddd
  4025f0:	00401e11 	.word	0x00401e11
  4025f4:	00401d75 	.word	0x00401d75
  4025f8:	004012d7 	.word	0x004012d7

004025fc <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  4025fc:	b5b0      	push	{r4, r5, r7, lr}
  4025fe:	b090      	sub	sp, #64	; 0x40
  402600:	af06      	add	r7, sp, #24
	/* Initialize the SAM system */
	sysclk_init();
  402602:	4b39      	ldr	r3, [pc, #228]	; (4026e8 <main+0xec>)
  402604:	4798      	blx	r3
	delay_init();
	io_init();
  402606:	4b39      	ldr	r3, [pc, #228]	; (4026ec <main+0xf0>)
  402608:	4798      	blx	r3
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40260a:	4b39      	ldr	r3, [pc, #228]	; (4026f0 <main+0xf4>)
  40260c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402610:	605a      	str	r2, [r3, #4]

	/* Configura Leds */
	LED_init(0);
  402612:	2000      	movs	r0, #0
  402614:	4b37      	ldr	r3, [pc, #220]	; (4026f4 <main+0xf8>)
  402616:	4798      	blx	r3

	/* Configura os botões */
	BUT_init();
  402618:	4b37      	ldr	r3, [pc, #220]	; (4026f8 <main+0xfc>)
  40261a:	4798      	blx	r3
	
	// Inicializa RTT com IRQ no alarme.
	f_rtt_alarme = true;
  40261c:	4b37      	ldr	r3, [pc, #220]	; (4026fc <main+0x100>)
  40261e:	2201      	movs	r2, #1
  402620:	701a      	strb	r2, [r3, #0]

	/** Configura RTC */
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45, 1};
  402622:	4b37      	ldr	r3, [pc, #220]	; (402700 <main+0x104>)
  402624:	1d3c      	adds	r4, r7, #4
  402626:	461d      	mov	r5, r3
  402628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40262a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40262c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  402634:	2302      	movs	r3, #2
  402636:	9305      	str	r3, [sp, #20]
  402638:	466d      	mov	r5, sp
  40263a:	f107 040c 	add.w	r4, r7, #12
  40263e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402642:	6823      	ldr	r3, [r4, #0]
  402644:	602b      	str	r3, [r5, #0]
  402646:	1d3b      	adds	r3, r7, #4
  402648:	cb0c      	ldmia	r3, {r2, r3}
  40264a:	2102      	movs	r1, #2
  40264c:	482d      	ldr	r0, [pc, #180]	; (402704 <main+0x108>)
  40264e:	4c2e      	ldr	r4, [pc, #184]	; (402708 <main+0x10c>)
  402650:	47a0      	blx	r4
	/** Configura timer TC0, canal 1 */
	TC_init(TC0, ID_TC1, 1, 4);
  402652:	2304      	movs	r3, #4
  402654:	2201      	movs	r2, #1
  402656:	2118      	movs	r1, #24
  402658:	482c      	ldr	r0, [pc, #176]	; (40270c <main+0x110>)
  40265a:	4c2d      	ldr	r4, [pc, #180]	; (402710 <main+0x114>)
  40265c:	47a0      	blx	r4

	/* configura alarme do RTC */
	rtc_set_date_alarm(RTC, 1, rtc_initial.month, 1, rtc_initial.day);
  40265e:	68ba      	ldr	r2, [r7, #8]
  402660:	68fb      	ldr	r3, [r7, #12]
  402662:	9300      	str	r3, [sp, #0]
  402664:	2301      	movs	r3, #1
  402666:	2101      	movs	r1, #1
  402668:	4826      	ldr	r0, [pc, #152]	; (402704 <main+0x108>)
  40266a:	4c2a      	ldr	r4, [pc, #168]	; (402714 <main+0x118>)
  40266c:	47a0      	blx	r4
	rtc_set_time_alarm(RTC, 1, rtc_initial.hour, 1, rtc_initial.minute, 1, rtc_initial.seccond + 20);
  40266e:	6979      	ldr	r1, [r7, #20]
  402670:	69bb      	ldr	r3, [r7, #24]
  402672:	69fa      	ldr	r2, [r7, #28]
  402674:	3214      	adds	r2, #20
  402676:	9202      	str	r2, [sp, #8]
  402678:	2201      	movs	r2, #1
  40267a:	9201      	str	r2, [sp, #4]
  40267c:	9300      	str	r3, [sp, #0]
  40267e:	2301      	movs	r3, #1
  402680:	460a      	mov	r2, r1
  402682:	2101      	movs	r1, #1
  402684:	481f      	ldr	r0, [pc, #124]	; (402704 <main+0x108>)
  402686:	4c24      	ldr	r4, [pc, #144]	; (402718 <main+0x11c>)
  402688:	47a0      	blx	r4

	while (1)	{
		/* Entrar em modo sleep */
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  40268a:	2002      	movs	r0, #2
  40268c:	4b23      	ldr	r3, [pc, #140]	; (40271c <main+0x120>)
  40268e:	4798      	blx	r3
		
		if(flag_tc){
  402690:	4b23      	ldr	r3, [pc, #140]	; (402720 <main+0x124>)
  402692:	781b      	ldrb	r3, [r3, #0]
  402694:	b2db      	uxtb	r3, r3
  402696:	2b00      	cmp	r3, #0
  402698:	d006      	beq.n	4026a8 <main+0xac>
			pisca_led1(1,10);
  40269a:	210a      	movs	r1, #10
  40269c:	2001      	movs	r0, #1
  40269e:	4b21      	ldr	r3, [pc, #132]	; (402724 <main+0x128>)
  4026a0:	4798      	blx	r3
			flag_tc = 0;
  4026a2:	4b1f      	ldr	r3, [pc, #124]	; (402720 <main+0x124>)
  4026a4:	2200      	movs	r2, #0
  4026a6:	701a      	strb	r2, [r3, #0]
		}
		
		if(flag_rtc){
  4026a8:	4b1f      	ldr	r3, [pc, #124]	; (402728 <main+0x12c>)
  4026aa:	781b      	ldrb	r3, [r3, #0]
  4026ac:	b2db      	uxtb	r3, r3
  4026ae:	2b00      	cmp	r3, #0
  4026b0:	d006      	beq.n	4026c0 <main+0xc4>
			pisca_led3(5, 200);
  4026b2:	21c8      	movs	r1, #200	; 0xc8
  4026b4:	2005      	movs	r0, #5
  4026b6:	4b1d      	ldr	r3, [pc, #116]	; (40272c <main+0x130>)
  4026b8:	4798      	blx	r3
			flag_rtc = 0;
  4026ba:	4b1b      	ldr	r3, [pc, #108]	; (402728 <main+0x12c>)
  4026bc:	2200      	movs	r2, #0
  4026be:	701a      	strb	r2, [r3, #0]
		}
		if (f_rtt_alarme){
  4026c0:	4b0e      	ldr	r3, [pc, #56]	; (4026fc <main+0x100>)
  4026c2:	781b      	ldrb	r3, [r3, #0]
  4026c4:	b2db      	uxtb	r3, r3
  4026c6:	2b00      	cmp	r3, #0
  4026c8:	d0df      	beq.n	40268a <main+0x8e>
      
		  /*
		   * IRQ apos 4s -> 8*0.5
		   */
		  uint16_t pllPreScale = (int) (((float) 32768) / 4.0);
  4026ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4026ce:	84fb      	strh	r3, [r7, #38]	; 0x26
		  uint32_t irqRTTvalue = 8;
  4026d0:	2308      	movs	r3, #8
  4026d2:	623b      	str	r3, [r7, #32]
      
		  // reinicia RTT para gerar um novo IRQ
		  RTT_init(pllPreScale, irqRTTvalue);         
  4026d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4026d6:	6a39      	ldr	r1, [r7, #32]
  4026d8:	4618      	mov	r0, r3
  4026da:	4b15      	ldr	r3, [pc, #84]	; (402730 <main+0x134>)
  4026dc:	4798      	blx	r3
      
		  f_rtt_alarme = false;
  4026de:	4b07      	ldr	r3, [pc, #28]	; (4026fc <main+0x100>)
  4026e0:	2200      	movs	r2, #0
  4026e2:	701a      	strb	r2, [r3, #0]
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4026e4:	e7d1      	b.n	40268a <main+0x8e>
  4026e6:	bf00      	nop
  4026e8:	004004ad 	.word	0x004004ad
  4026ec:	0040231d 	.word	0x0040231d
  4026f0:	400e1850 	.word	0x400e1850
  4026f4:	0040244d 	.word	0x0040244d
  4026f8:	004023e1 	.word	0x004023e1
  4026fc:	204004e2 	.word	0x204004e2
  402700:	00402bb4 	.word	0x00402bb4
  402704:	400e1860 	.word	0x400e1860
  402708:	00402559 	.word	0x00402559
  40270c:	4000c000 	.word	0x4000c000
  402710:	004024b5 	.word	0x004024b5
  402714:	00401639 	.word	0x00401639
  402718:	004013fd 	.word	0x004013fd
  40271c:	00400f0d 	.word	0x00400f0d
  402720:	204004e1 	.word	0x204004e1
  402724:	00401f55 	.word	0x00401f55
  402728:	204004e0 	.word	0x204004e0
  40272c:	0040217d 	.word	0x0040217d
  402730:	00402349 	.word	0x00402349

00402734 <__aeabi_uldivmod>:
  402734:	b953      	cbnz	r3, 40274c <__aeabi_uldivmod+0x18>
  402736:	b94a      	cbnz	r2, 40274c <__aeabi_uldivmod+0x18>
  402738:	2900      	cmp	r1, #0
  40273a:	bf08      	it	eq
  40273c:	2800      	cmpeq	r0, #0
  40273e:	bf1c      	itt	ne
  402740:	f04f 31ff 	movne.w	r1, #4294967295
  402744:	f04f 30ff 	movne.w	r0, #4294967295
  402748:	f000 b97a 	b.w	402a40 <__aeabi_idiv0>
  40274c:	f1ad 0c08 	sub.w	ip, sp, #8
  402750:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402754:	f000 f806 	bl	402764 <__udivmoddi4>
  402758:	f8dd e004 	ldr.w	lr, [sp, #4]
  40275c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402760:	b004      	add	sp, #16
  402762:	4770      	bx	lr

00402764 <__udivmoddi4>:
  402764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402768:	468c      	mov	ip, r1
  40276a:	460d      	mov	r5, r1
  40276c:	4604      	mov	r4, r0
  40276e:	9e08      	ldr	r6, [sp, #32]
  402770:	2b00      	cmp	r3, #0
  402772:	d151      	bne.n	402818 <__udivmoddi4+0xb4>
  402774:	428a      	cmp	r2, r1
  402776:	4617      	mov	r7, r2
  402778:	d96d      	bls.n	402856 <__udivmoddi4+0xf2>
  40277a:	fab2 fe82 	clz	lr, r2
  40277e:	f1be 0f00 	cmp.w	lr, #0
  402782:	d00b      	beq.n	40279c <__udivmoddi4+0x38>
  402784:	f1ce 0c20 	rsb	ip, lr, #32
  402788:	fa01 f50e 	lsl.w	r5, r1, lr
  40278c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402790:	fa02 f70e 	lsl.w	r7, r2, lr
  402794:	ea4c 0c05 	orr.w	ip, ip, r5
  402798:	fa00 f40e 	lsl.w	r4, r0, lr
  40279c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4027a0:	0c25      	lsrs	r5, r4, #16
  4027a2:	fbbc f8fa 	udiv	r8, ip, sl
  4027a6:	fa1f f987 	uxth.w	r9, r7
  4027aa:	fb0a cc18 	mls	ip, sl, r8, ip
  4027ae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4027b2:	fb08 f309 	mul.w	r3, r8, r9
  4027b6:	42ab      	cmp	r3, r5
  4027b8:	d90a      	bls.n	4027d0 <__udivmoddi4+0x6c>
  4027ba:	19ed      	adds	r5, r5, r7
  4027bc:	f108 32ff 	add.w	r2, r8, #4294967295
  4027c0:	f080 8123 	bcs.w	402a0a <__udivmoddi4+0x2a6>
  4027c4:	42ab      	cmp	r3, r5
  4027c6:	f240 8120 	bls.w	402a0a <__udivmoddi4+0x2a6>
  4027ca:	f1a8 0802 	sub.w	r8, r8, #2
  4027ce:	443d      	add	r5, r7
  4027d0:	1aed      	subs	r5, r5, r3
  4027d2:	b2a4      	uxth	r4, r4
  4027d4:	fbb5 f0fa 	udiv	r0, r5, sl
  4027d8:	fb0a 5510 	mls	r5, sl, r0, r5
  4027dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4027e0:	fb00 f909 	mul.w	r9, r0, r9
  4027e4:	45a1      	cmp	r9, r4
  4027e6:	d909      	bls.n	4027fc <__udivmoddi4+0x98>
  4027e8:	19e4      	adds	r4, r4, r7
  4027ea:	f100 33ff 	add.w	r3, r0, #4294967295
  4027ee:	f080 810a 	bcs.w	402a06 <__udivmoddi4+0x2a2>
  4027f2:	45a1      	cmp	r9, r4
  4027f4:	f240 8107 	bls.w	402a06 <__udivmoddi4+0x2a2>
  4027f8:	3802      	subs	r0, #2
  4027fa:	443c      	add	r4, r7
  4027fc:	eba4 0409 	sub.w	r4, r4, r9
  402800:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402804:	2100      	movs	r1, #0
  402806:	2e00      	cmp	r6, #0
  402808:	d061      	beq.n	4028ce <__udivmoddi4+0x16a>
  40280a:	fa24 f40e 	lsr.w	r4, r4, lr
  40280e:	2300      	movs	r3, #0
  402810:	6034      	str	r4, [r6, #0]
  402812:	6073      	str	r3, [r6, #4]
  402814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402818:	428b      	cmp	r3, r1
  40281a:	d907      	bls.n	40282c <__udivmoddi4+0xc8>
  40281c:	2e00      	cmp	r6, #0
  40281e:	d054      	beq.n	4028ca <__udivmoddi4+0x166>
  402820:	2100      	movs	r1, #0
  402822:	e886 0021 	stmia.w	r6, {r0, r5}
  402826:	4608      	mov	r0, r1
  402828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40282c:	fab3 f183 	clz	r1, r3
  402830:	2900      	cmp	r1, #0
  402832:	f040 808e 	bne.w	402952 <__udivmoddi4+0x1ee>
  402836:	42ab      	cmp	r3, r5
  402838:	d302      	bcc.n	402840 <__udivmoddi4+0xdc>
  40283a:	4282      	cmp	r2, r0
  40283c:	f200 80fa 	bhi.w	402a34 <__udivmoddi4+0x2d0>
  402840:	1a84      	subs	r4, r0, r2
  402842:	eb65 0503 	sbc.w	r5, r5, r3
  402846:	2001      	movs	r0, #1
  402848:	46ac      	mov	ip, r5
  40284a:	2e00      	cmp	r6, #0
  40284c:	d03f      	beq.n	4028ce <__udivmoddi4+0x16a>
  40284e:	e886 1010 	stmia.w	r6, {r4, ip}
  402852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402856:	b912      	cbnz	r2, 40285e <__udivmoddi4+0xfa>
  402858:	2701      	movs	r7, #1
  40285a:	fbb7 f7f2 	udiv	r7, r7, r2
  40285e:	fab7 fe87 	clz	lr, r7
  402862:	f1be 0f00 	cmp.w	lr, #0
  402866:	d134      	bne.n	4028d2 <__udivmoddi4+0x16e>
  402868:	1beb      	subs	r3, r5, r7
  40286a:	0c3a      	lsrs	r2, r7, #16
  40286c:	fa1f fc87 	uxth.w	ip, r7
  402870:	2101      	movs	r1, #1
  402872:	fbb3 f8f2 	udiv	r8, r3, r2
  402876:	0c25      	lsrs	r5, r4, #16
  402878:	fb02 3318 	mls	r3, r2, r8, r3
  40287c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402880:	fb0c f308 	mul.w	r3, ip, r8
  402884:	42ab      	cmp	r3, r5
  402886:	d907      	bls.n	402898 <__udivmoddi4+0x134>
  402888:	19ed      	adds	r5, r5, r7
  40288a:	f108 30ff 	add.w	r0, r8, #4294967295
  40288e:	d202      	bcs.n	402896 <__udivmoddi4+0x132>
  402890:	42ab      	cmp	r3, r5
  402892:	f200 80d1 	bhi.w	402a38 <__udivmoddi4+0x2d4>
  402896:	4680      	mov	r8, r0
  402898:	1aed      	subs	r5, r5, r3
  40289a:	b2a3      	uxth	r3, r4
  40289c:	fbb5 f0f2 	udiv	r0, r5, r2
  4028a0:	fb02 5510 	mls	r5, r2, r0, r5
  4028a4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4028a8:	fb0c fc00 	mul.w	ip, ip, r0
  4028ac:	45a4      	cmp	ip, r4
  4028ae:	d907      	bls.n	4028c0 <__udivmoddi4+0x15c>
  4028b0:	19e4      	adds	r4, r4, r7
  4028b2:	f100 33ff 	add.w	r3, r0, #4294967295
  4028b6:	d202      	bcs.n	4028be <__udivmoddi4+0x15a>
  4028b8:	45a4      	cmp	ip, r4
  4028ba:	f200 80b8 	bhi.w	402a2e <__udivmoddi4+0x2ca>
  4028be:	4618      	mov	r0, r3
  4028c0:	eba4 040c 	sub.w	r4, r4, ip
  4028c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4028c8:	e79d      	b.n	402806 <__udivmoddi4+0xa2>
  4028ca:	4631      	mov	r1, r6
  4028cc:	4630      	mov	r0, r6
  4028ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028d2:	f1ce 0420 	rsb	r4, lr, #32
  4028d6:	fa05 f30e 	lsl.w	r3, r5, lr
  4028da:	fa07 f70e 	lsl.w	r7, r7, lr
  4028de:	fa20 f804 	lsr.w	r8, r0, r4
  4028e2:	0c3a      	lsrs	r2, r7, #16
  4028e4:	fa25 f404 	lsr.w	r4, r5, r4
  4028e8:	ea48 0803 	orr.w	r8, r8, r3
  4028ec:	fbb4 f1f2 	udiv	r1, r4, r2
  4028f0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4028f4:	fb02 4411 	mls	r4, r2, r1, r4
  4028f8:	fa1f fc87 	uxth.w	ip, r7
  4028fc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402900:	fb01 f30c 	mul.w	r3, r1, ip
  402904:	42ab      	cmp	r3, r5
  402906:	fa00 f40e 	lsl.w	r4, r0, lr
  40290a:	d909      	bls.n	402920 <__udivmoddi4+0x1bc>
  40290c:	19ed      	adds	r5, r5, r7
  40290e:	f101 30ff 	add.w	r0, r1, #4294967295
  402912:	f080 808a 	bcs.w	402a2a <__udivmoddi4+0x2c6>
  402916:	42ab      	cmp	r3, r5
  402918:	f240 8087 	bls.w	402a2a <__udivmoddi4+0x2c6>
  40291c:	3902      	subs	r1, #2
  40291e:	443d      	add	r5, r7
  402920:	1aeb      	subs	r3, r5, r3
  402922:	fa1f f588 	uxth.w	r5, r8
  402926:	fbb3 f0f2 	udiv	r0, r3, r2
  40292a:	fb02 3310 	mls	r3, r2, r0, r3
  40292e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402932:	fb00 f30c 	mul.w	r3, r0, ip
  402936:	42ab      	cmp	r3, r5
  402938:	d907      	bls.n	40294a <__udivmoddi4+0x1e6>
  40293a:	19ed      	adds	r5, r5, r7
  40293c:	f100 38ff 	add.w	r8, r0, #4294967295
  402940:	d26f      	bcs.n	402a22 <__udivmoddi4+0x2be>
  402942:	42ab      	cmp	r3, r5
  402944:	d96d      	bls.n	402a22 <__udivmoddi4+0x2be>
  402946:	3802      	subs	r0, #2
  402948:	443d      	add	r5, r7
  40294a:	1aeb      	subs	r3, r5, r3
  40294c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402950:	e78f      	b.n	402872 <__udivmoddi4+0x10e>
  402952:	f1c1 0720 	rsb	r7, r1, #32
  402956:	fa22 f807 	lsr.w	r8, r2, r7
  40295a:	408b      	lsls	r3, r1
  40295c:	fa05 f401 	lsl.w	r4, r5, r1
  402960:	ea48 0303 	orr.w	r3, r8, r3
  402964:	fa20 fe07 	lsr.w	lr, r0, r7
  402968:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40296c:	40fd      	lsrs	r5, r7
  40296e:	ea4e 0e04 	orr.w	lr, lr, r4
  402972:	fbb5 f9fc 	udiv	r9, r5, ip
  402976:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40297a:	fb0c 5519 	mls	r5, ip, r9, r5
  40297e:	fa1f f883 	uxth.w	r8, r3
  402982:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402986:	fb09 f408 	mul.w	r4, r9, r8
  40298a:	42ac      	cmp	r4, r5
  40298c:	fa02 f201 	lsl.w	r2, r2, r1
  402990:	fa00 fa01 	lsl.w	sl, r0, r1
  402994:	d908      	bls.n	4029a8 <__udivmoddi4+0x244>
  402996:	18ed      	adds	r5, r5, r3
  402998:	f109 30ff 	add.w	r0, r9, #4294967295
  40299c:	d243      	bcs.n	402a26 <__udivmoddi4+0x2c2>
  40299e:	42ac      	cmp	r4, r5
  4029a0:	d941      	bls.n	402a26 <__udivmoddi4+0x2c2>
  4029a2:	f1a9 0902 	sub.w	r9, r9, #2
  4029a6:	441d      	add	r5, r3
  4029a8:	1b2d      	subs	r5, r5, r4
  4029aa:	fa1f fe8e 	uxth.w	lr, lr
  4029ae:	fbb5 f0fc 	udiv	r0, r5, ip
  4029b2:	fb0c 5510 	mls	r5, ip, r0, r5
  4029b6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4029ba:	fb00 f808 	mul.w	r8, r0, r8
  4029be:	45a0      	cmp	r8, r4
  4029c0:	d907      	bls.n	4029d2 <__udivmoddi4+0x26e>
  4029c2:	18e4      	adds	r4, r4, r3
  4029c4:	f100 35ff 	add.w	r5, r0, #4294967295
  4029c8:	d229      	bcs.n	402a1e <__udivmoddi4+0x2ba>
  4029ca:	45a0      	cmp	r8, r4
  4029cc:	d927      	bls.n	402a1e <__udivmoddi4+0x2ba>
  4029ce:	3802      	subs	r0, #2
  4029d0:	441c      	add	r4, r3
  4029d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4029d6:	eba4 0408 	sub.w	r4, r4, r8
  4029da:	fba0 8902 	umull	r8, r9, r0, r2
  4029de:	454c      	cmp	r4, r9
  4029e0:	46c6      	mov	lr, r8
  4029e2:	464d      	mov	r5, r9
  4029e4:	d315      	bcc.n	402a12 <__udivmoddi4+0x2ae>
  4029e6:	d012      	beq.n	402a0e <__udivmoddi4+0x2aa>
  4029e8:	b156      	cbz	r6, 402a00 <__udivmoddi4+0x29c>
  4029ea:	ebba 030e 	subs.w	r3, sl, lr
  4029ee:	eb64 0405 	sbc.w	r4, r4, r5
  4029f2:	fa04 f707 	lsl.w	r7, r4, r7
  4029f6:	40cb      	lsrs	r3, r1
  4029f8:	431f      	orrs	r7, r3
  4029fa:	40cc      	lsrs	r4, r1
  4029fc:	6037      	str	r7, [r6, #0]
  4029fe:	6074      	str	r4, [r6, #4]
  402a00:	2100      	movs	r1, #0
  402a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a06:	4618      	mov	r0, r3
  402a08:	e6f8      	b.n	4027fc <__udivmoddi4+0x98>
  402a0a:	4690      	mov	r8, r2
  402a0c:	e6e0      	b.n	4027d0 <__udivmoddi4+0x6c>
  402a0e:	45c2      	cmp	sl, r8
  402a10:	d2ea      	bcs.n	4029e8 <__udivmoddi4+0x284>
  402a12:	ebb8 0e02 	subs.w	lr, r8, r2
  402a16:	eb69 0503 	sbc.w	r5, r9, r3
  402a1a:	3801      	subs	r0, #1
  402a1c:	e7e4      	b.n	4029e8 <__udivmoddi4+0x284>
  402a1e:	4628      	mov	r0, r5
  402a20:	e7d7      	b.n	4029d2 <__udivmoddi4+0x26e>
  402a22:	4640      	mov	r0, r8
  402a24:	e791      	b.n	40294a <__udivmoddi4+0x1e6>
  402a26:	4681      	mov	r9, r0
  402a28:	e7be      	b.n	4029a8 <__udivmoddi4+0x244>
  402a2a:	4601      	mov	r1, r0
  402a2c:	e778      	b.n	402920 <__udivmoddi4+0x1bc>
  402a2e:	3802      	subs	r0, #2
  402a30:	443c      	add	r4, r7
  402a32:	e745      	b.n	4028c0 <__udivmoddi4+0x15c>
  402a34:	4608      	mov	r0, r1
  402a36:	e708      	b.n	40284a <__udivmoddi4+0xe6>
  402a38:	f1a8 0802 	sub.w	r8, r8, #2
  402a3c:	443d      	add	r5, r7
  402a3e:	e72b      	b.n	402898 <__udivmoddi4+0x134>

00402a40 <__aeabi_idiv0>:
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop

00402a44 <__libc_init_array>:
  402a44:	b570      	push	{r4, r5, r6, lr}
  402a46:	4e0f      	ldr	r6, [pc, #60]	; (402a84 <__libc_init_array+0x40>)
  402a48:	4d0f      	ldr	r5, [pc, #60]	; (402a88 <__libc_init_array+0x44>)
  402a4a:	1b76      	subs	r6, r6, r5
  402a4c:	10b6      	asrs	r6, r6, #2
  402a4e:	bf18      	it	ne
  402a50:	2400      	movne	r4, #0
  402a52:	d005      	beq.n	402a60 <__libc_init_array+0x1c>
  402a54:	3401      	adds	r4, #1
  402a56:	f855 3b04 	ldr.w	r3, [r5], #4
  402a5a:	4798      	blx	r3
  402a5c:	42a6      	cmp	r6, r4
  402a5e:	d1f9      	bne.n	402a54 <__libc_init_array+0x10>
  402a60:	4e0a      	ldr	r6, [pc, #40]	; (402a8c <__libc_init_array+0x48>)
  402a62:	4d0b      	ldr	r5, [pc, #44]	; (402a90 <__libc_init_array+0x4c>)
  402a64:	1b76      	subs	r6, r6, r5
  402a66:	f000 f8b5 	bl	402bd4 <_init>
  402a6a:	10b6      	asrs	r6, r6, #2
  402a6c:	bf18      	it	ne
  402a6e:	2400      	movne	r4, #0
  402a70:	d006      	beq.n	402a80 <__libc_init_array+0x3c>
  402a72:	3401      	adds	r4, #1
  402a74:	f855 3b04 	ldr.w	r3, [r5], #4
  402a78:	4798      	blx	r3
  402a7a:	42a6      	cmp	r6, r4
  402a7c:	d1f9      	bne.n	402a72 <__libc_init_array+0x2e>
  402a7e:	bd70      	pop	{r4, r5, r6, pc}
  402a80:	bd70      	pop	{r4, r5, r6, pc}
  402a82:	bf00      	nop
  402a84:	00402be0 	.word	0x00402be0
  402a88:	00402be0 	.word	0x00402be0
  402a8c:	00402be8 	.word	0x00402be8
  402a90:	00402be0 	.word	0x00402be0

00402a94 <register_fini>:
  402a94:	4b02      	ldr	r3, [pc, #8]	; (402aa0 <register_fini+0xc>)
  402a96:	b113      	cbz	r3, 402a9e <register_fini+0xa>
  402a98:	4802      	ldr	r0, [pc, #8]	; (402aa4 <register_fini+0x10>)
  402a9a:	f000 b805 	b.w	402aa8 <atexit>
  402a9e:	4770      	bx	lr
  402aa0:	00000000 	.word	0x00000000
  402aa4:	00402ab5 	.word	0x00402ab5

00402aa8 <atexit>:
  402aa8:	2300      	movs	r3, #0
  402aaa:	4601      	mov	r1, r0
  402aac:	461a      	mov	r2, r3
  402aae:	4618      	mov	r0, r3
  402ab0:	f000 b81e 	b.w	402af0 <__register_exitproc>

00402ab4 <__libc_fini_array>:
  402ab4:	b538      	push	{r3, r4, r5, lr}
  402ab6:	4c0a      	ldr	r4, [pc, #40]	; (402ae0 <__libc_fini_array+0x2c>)
  402ab8:	4d0a      	ldr	r5, [pc, #40]	; (402ae4 <__libc_fini_array+0x30>)
  402aba:	1b64      	subs	r4, r4, r5
  402abc:	10a4      	asrs	r4, r4, #2
  402abe:	d00a      	beq.n	402ad6 <__libc_fini_array+0x22>
  402ac0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ac4:	3b01      	subs	r3, #1
  402ac6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402aca:	3c01      	subs	r4, #1
  402acc:	f855 3904 	ldr.w	r3, [r5], #-4
  402ad0:	4798      	blx	r3
  402ad2:	2c00      	cmp	r4, #0
  402ad4:	d1f9      	bne.n	402aca <__libc_fini_array+0x16>
  402ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402ada:	f000 b885 	b.w	402be8 <_fini>
  402ade:	bf00      	nop
  402ae0:	00402bf8 	.word	0x00402bf8
  402ae4:	00402bf4 	.word	0x00402bf4

00402ae8 <__retarget_lock_acquire_recursive>:
  402ae8:	4770      	bx	lr
  402aea:	bf00      	nop

00402aec <__retarget_lock_release_recursive>:
  402aec:	4770      	bx	lr
  402aee:	bf00      	nop

00402af0 <__register_exitproc>:
  402af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402af4:	4d2c      	ldr	r5, [pc, #176]	; (402ba8 <__register_exitproc+0xb8>)
  402af6:	4606      	mov	r6, r0
  402af8:	6828      	ldr	r0, [r5, #0]
  402afa:	4698      	mov	r8, r3
  402afc:	460f      	mov	r7, r1
  402afe:	4691      	mov	r9, r2
  402b00:	f7ff fff2 	bl	402ae8 <__retarget_lock_acquire_recursive>
  402b04:	4b29      	ldr	r3, [pc, #164]	; (402bac <__register_exitproc+0xbc>)
  402b06:	681c      	ldr	r4, [r3, #0]
  402b08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402b0c:	2b00      	cmp	r3, #0
  402b0e:	d03e      	beq.n	402b8e <__register_exitproc+0x9e>
  402b10:	685a      	ldr	r2, [r3, #4]
  402b12:	2a1f      	cmp	r2, #31
  402b14:	dc1c      	bgt.n	402b50 <__register_exitproc+0x60>
  402b16:	f102 0e01 	add.w	lr, r2, #1
  402b1a:	b176      	cbz	r6, 402b3a <__register_exitproc+0x4a>
  402b1c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402b20:	2401      	movs	r4, #1
  402b22:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402b26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402b2a:	4094      	lsls	r4, r2
  402b2c:	4320      	orrs	r0, r4
  402b2e:	2e02      	cmp	r6, #2
  402b30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402b34:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402b38:	d023      	beq.n	402b82 <__register_exitproc+0x92>
  402b3a:	3202      	adds	r2, #2
  402b3c:	f8c3 e004 	str.w	lr, [r3, #4]
  402b40:	6828      	ldr	r0, [r5, #0]
  402b42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402b46:	f7ff ffd1 	bl	402aec <__retarget_lock_release_recursive>
  402b4a:	2000      	movs	r0, #0
  402b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b50:	4b17      	ldr	r3, [pc, #92]	; (402bb0 <__register_exitproc+0xc0>)
  402b52:	b30b      	cbz	r3, 402b98 <__register_exitproc+0xa8>
  402b54:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402b58:	f3af 8000 	nop.w
  402b5c:	4603      	mov	r3, r0
  402b5e:	b1d8      	cbz	r0, 402b98 <__register_exitproc+0xa8>
  402b60:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402b64:	6002      	str	r2, [r0, #0]
  402b66:	2100      	movs	r1, #0
  402b68:	6041      	str	r1, [r0, #4]
  402b6a:	460a      	mov	r2, r1
  402b6c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402b70:	f04f 0e01 	mov.w	lr, #1
  402b74:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402b78:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402b7c:	2e00      	cmp	r6, #0
  402b7e:	d0dc      	beq.n	402b3a <__register_exitproc+0x4a>
  402b80:	e7cc      	b.n	402b1c <__register_exitproc+0x2c>
  402b82:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402b86:	430c      	orrs	r4, r1
  402b88:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402b8c:	e7d5      	b.n	402b3a <__register_exitproc+0x4a>
  402b8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402b92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402b96:	e7bb      	b.n	402b10 <__register_exitproc+0x20>
  402b98:	6828      	ldr	r0, [r5, #0]
  402b9a:	f7ff ffa7 	bl	402aec <__retarget_lock_release_recursive>
  402b9e:	f04f 30ff 	mov.w	r0, #4294967295
  402ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ba6:	bf00      	nop
  402ba8:	20400440 	.word	0x20400440
  402bac:	00402bd0 	.word	0x00402bd0
  402bb0:	00000000 	.word	0x00000000
  402bb4:	000007e2 	.word	0x000007e2
  402bb8:	00000003 	.word	0x00000003
  402bbc:	00000013 	.word	0x00000013
  402bc0:	0000000c 	.word	0x0000000c
  402bc4:	0000000f 	.word	0x0000000f
  402bc8:	0000002d 	.word	0x0000002d
  402bcc:	00000001 	.word	0x00000001

00402bd0 <_global_impure_ptr>:
  402bd0:	20400018                                ..@ 

00402bd4 <_init>:
  402bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bd6:	bf00      	nop
  402bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402bda:	bc08      	pop	{r3}
  402bdc:	469e      	mov	lr, r3
  402bde:	4770      	bx	lr

00402be0 <__init_array_start>:
  402be0:	00402a95 	.word	0x00402a95

00402be4 <__frame_dummy_init_array_entry>:
  402be4:	00400165                                e.@.

00402be8 <_fini>:
  402be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bea:	bf00      	nop
  402bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402bee:	bc08      	pop	{r3}
  402bf0:	469e      	mov	lr, r3
  402bf2:	4770      	bx	lr

00402bf4 <__fini_array_start>:
  402bf4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <ul_flash_in_wait_mode>:
2040000c:	0000 0020                                   .. .

20400010 <SystemCoreClock>:
20400010:	0900 003d 0000 0000                         ..=.....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	04e4 2040                                   ..@ 
